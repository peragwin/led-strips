{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"x",
				"x08"
			],
			[
				"glob",
				"globalFrameDelay"
			],
			[
				"global",
				"globalBrightness"
			],
			[
				"serialRx",
				"serialRxBuff_p"
			],
			[
				"ser",
				"serialTxBuff"
			],
			[
				"addr",
				"address"
			],
			[
				"serial",
				"serialDoRawRegisterWrite"
			],
			[
				"fi",
				"filter-out"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"Raw",
				"RawRegReadValue"
			],
			[
				"clearOnReaD",
				"clearOnReadAccess"
			],
			[
				"Buff",
				"BufferAddress"
			],
			[
				"Bu",
				"BufferStatus"
			],
			[
				"Dis",
				"DisplayStatus"
			],
			[
				"Re",
				"Revision"
			],
			[
				"buffer",
				"bufferError"
			],
			[
				"buff",
				"bufferAddress"
			],
			[
				"dis",
				"displayControl"
			],
			[
				"en",
				"environStatus"
			],
			[
				"scra",
				"scratchPad"
			],
			[
				"control",
				"controlRegisters"
			],
			[
				"read",
				"readOnlyAccess"
			],
			[
				"valid",
				"validAccess"
			],
			[
				"inv",
				"invalidAccess"
			],
			[
				"vali",
				"validAccess"
			],
			[
				"uin",
				"uint32_t"
			],
			[
				"cont",
				"controlRegisters"
			],
			[
				"regDis",
				"regDisplayStatus"
			],
			[
				"regDispl",
				"regDisplayControl"
			],
			[
				"num",
				"numberOfStrips"
			],
			[
				"displ",
				"displayControl"
			],
			[
				"numb",
				"numberLedsPerStrip"
			],
			[
				"pixel",
				"pixelId"
			],
			[
				"bu",
				"bufferAddress"
			],
			[
				"con",
				"controlRegisters"
			],
			[
				"rea",
				"readControlRegister"
			],
			[
				"DIS",
				"DISPLAYERROR_BR"
			],
			[
				"NUM",
				"NUM_CHANNELS"
			],
			[
				"globa",
				"globalBrightness"
			],
			[
				"fram",
				"frameCount"
			],
			[
				"fra",
				"frameCount"
			],
			[
				"hu",
				"huart2"
			],
			[
				"HAL_U",
				"HAL_UART_RxCpltCallback"
			],
			[
				"uar",
				"uartCharBuffer"
			],
			[
				"HAL",
				"HAL_BUSY"
			],
			[
				"u",
				"uartBuff"
			],
			[
				"UART_H",
				"UART_HandleTypeDef"
			],
			[
				"ua",
				"uartBuff"
			],
			[
				"uart",
				"uartBuffPtr"
			],
			[
				"h",
				"huart2"
			],
			[
				"un",
				"uint8_t"
			],
			[
				"HAL_UAR",
				"HAL_UART_Receive_IT"
			],
			[
				"usa",
				"usartCharBuffer"
			],
			[
				"us",
				"usartCharBuffer"
			],
			[
				"a",
				"amplitude"
			],
			[
				"set",
				"setPixelBrightness"
			],
			[
				"Pi",
				"PixelBlock"
			],
			[
				"NUMN",
				"NUM_CHANNELS"
			],
			[
				"pix",
				"pixelIdx"
			],
			[
				"_pix",
				"_pixelBlockNow"
			],
			[
				"return",
				"returnBlock"
			],
			[
				"COlo",
				"ColorTypeDef"
			],
			[
				"pi",
				"pixelBlock"
			],
			[
				"LED",
				"LED_CHANNEL0"
			],
			[
				"frame",
				"frameBuffer"
			],
			[
				"DMA",
				"DMA_IO_FrameBuffer"
			],
			[
				"Fram",
				"FrameBuffer_ShiftSetPixel"
			],
			[
				"colorPro",
				"colorPrevious0"
			],
			[
				"__HAL_TIM",
				"__HAL_TIM_DISABLE"
			],
			[
				"DMA_IO",
				"DMA_IO_SendBuffer"
			],
			[
				"DAT",
				"DATA_TIM_PERIOD_SC"
			],
			[
				"TIM_CH",
				"TIM_CHANNEL_2"
			],
			[
				"TIM_CC",
				"TIM_CCxChannelCmd"
			],
			[
				"TIM_CHA",
				"TIM_CHANNEL_1"
			],
			[
				"hdma",
				"hdma_tim2_ch1_gpio_low"
			],
			[
				"hdm",
				"hdma_tim2_ch1_gpio_low"
			],
			[
				"De",
				"Debug_Setup"
			],
			[
				"GPIO",
				"GPIO_TypeDef"
			],
			[
				"Gp",
				"GpioA"
			],
			[
				"NVI",
				"NVIC_CTRL_INTR_REG"
			],
			[
				"Hal",
				"HAL_Delay"
			],
			[
				"LD2",
				"LD2_Pin"
			],
			[
				"LD2_P",
				"LD2_GPIO_Port"
			],
			[
				"DA",
				"DATA_TIM_PERIOD_SC"
			],
			[
				"hdma_tim2_",
				"hdma_tim2_ch1_gpio_high"
			],
			[
				"hdma_tim2_ch1_",
				"hdma_tim2_ch1_gpio_low"
			],
			[
				"HAL_",
				"HAL_GPIO_WritePin"
			],
			[
				"DM",
				"DMA_IO_FrameBuffer"
			],
			[
				"in",
				"index"
			],
			[
				"Color",
				"ColorTypeDef"
			],
			[
				"hd",
				"hdma_tim3_ch1"
			],
			[
				"TIM_DMA",
				"TIM_DMA_ID_CC2"
			],
			[
				"__HAL_TIM_DI",
				"__HAL_TIM_DISABLE_DMA"
			],
			[
				"W2",
				"WS2812_transferComplete"
			],
			[
				"TIM3",
				"TIM3_IRQn"
			],
			[
				"In",
				"Instance"
			],
			[
				"SRC",
				"SRC_HAL"
			],
			[
				"C",
				"CFLAGS"
			],
			[
				"SRC_",
				"SRC_STARTUP"
			],
			[
				"STM",
				"STM32F4xx"
			],
			[
				"Life",
				"LifePoint_List"
			],
			[
				"LifePoint_Lis",
				"LifePoint_ListNode"
			],
			[
				"LifePoint_Li",
				"LifePoint_ListNode"
			],
			[
				"LifeP",
				"LifePoint_List"
			],
			[
				"NUM_",
				"NUM_LIFE_POINTS"
			],
			[
				"LifePoint_List",
				"LifePoint_List_Append"
			],
			[
				"LifePo",
				"LifePoint_Create"
			],
			[
				"LifeGrid_",
				"LifeGrid_add_random_life"
			],
			[
				"add",
				"addRandomLife"
			],
			[
				"gradient",
				"gradientField"
			],
			[
				"gra",
				"gradientField"
			],
			[
				"food",
				"foodList"
			],
			[
				"LifePoint",
				"LifePoint_List"
			],
			[
				"int",
				"int8_t"
			],
			[
				"LifeGrid",
				"LifeGrid_updateObjects"
			],
			[
				"draw",
				"drawOjects"
			],
			[
				"LifeOb",
				"lifeObj_a_t"
			],
			[
				"GOL",
				"GOL_Grid_iterate"
			],
			[
				"LIFE",
				"LIFEY"
			],
			[
				"gmae",
				"game_ptr"
			],
			[
				"game_",
				"game_obj"
			],
			[
				"prt",
				"game_ptr"
			],
			[
				"life",
				"lifeGrid"
			],
			[
				"GOL_GRI",
				"GOL_Grid_iterate"
			],
			[
				"socket",
				"SocketIo"
			],
			[
				"RED",
				"REDIS_DB"
			],
			[
				"RE",
				"REDIS_SERVER"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Inc/ControlRegisters.h",
			"settings":
			{
				"buffer_size": 2164,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// ControlRegisters.c\n\n#include \"ControlRegisters.h\"\n\n\nstruct Revision // read only\n  {\n    //struct RegSpec regSpec;\n    u16 majorRev;\n    u16 minorRev;\n  };\n\n\n// this stores the actual data in RAM\n\nstruct ControlRegisters\n{\n\n  struct Revision // read only\n    revision;\n\n  u32 scratchPad;\n\n  struct EnvironStatus // reserved, read-only\n  {\n    u32 temperature[16];\n    u32 voltage[16];      // +0x0040\n    u32 current[16];      // +0x0080\n    u32 power[16];        // +0x00c0\n    u8 faults[16];       //  +0x0100\n  } environStatus;\n\n  struct DisplayControl\n  {\n    //struct RegSpec regSpec;\n    u8 softReset;\n    u8 numberLedsPerChannel;\n    u8 numberOfChannels;\n    u8 maxNumberOfChannels; // read-only\n    //struct MaxNumberOfStrips { struct RegSpec regSpec; u32 number; } maxNumberOfStrips;\n  } displayControl;\n\n  struct DisplayStatus\n  {\n    //struct RegSpec regSpec;\n    u16 brightness;\n    uint frameRate:15;\n    uint paused:1;\n  } displayStatus;\n\n  u8 displayMode;\n    // 0 -> raw\n    // 1 -> repeat\n    // >=2 -> demo_n\n\n  u8 displayError; // clear-on-read, read-only\n    // 0x1 -> invalid numberLedsPerStrip\n    // 0x2 -> invalid numberOfStrips\n    // 0x4 -> invalid brightness\n    // 0x8 -> invalid frameRate\n    // 0x10 -> unknown/invalid displayMode\n\n  struct BufferStatus\n  {\n    u8 numberOfFrames;\n    u8 currentFrame;\n  } bufferStatus;\n\n  struct BufferAddress\n  {\n    u8 frameId;\n    u8 channelId;\n    u8 pixelId;\n    uint increment:1;\n  } bufferAddress;\n\n  Pixel bufferValue;\n\n  u8 bufferError; // clear-on-read, read-only\n    // 0x1 -> frame id out-of-range\n    // 0x2 -> strip id out-of-range\n    // 0x4 -> pixel id out-of-range\n    // reserved\n    // 0x80 -> last valid pixel written\n\n  u8 accessStatus;\n\n};\n\nenum RegType\n{\n  reg8,\n  reg16,\n  reg32,\n  regRevision,\n  regDisplayControl,\n  regDisplayStatus,\n  regBufferStatus,\n  regBufferAddress,\n  regPixel,\n  invalid,\n\n} regTypes;\n\nenum RegAction\n{\n	noRegAction,\n\n  clear_on_read,\n\n  funcSetBrightness,\n\n  funcSetDemo1Brightness,\n  funcSetDemo1Phase,\n  funcSetDemo1Period,\n  \n  funcBufferAccess,\n};\n\nenum RegAccess\n{\n	rwRegAccess,\n  read_only,\n};\n\ntypedef struct {\n  enum RegType type;\n  enum RegAccess access;\n  enum RegAction action;\n  union _register\n  {\n    uint8_t  *reg8;\n    uint16_t *reg16;\n    uint32_t *reg32;\n    struct Revision *revision;\n    struct DisplayControl *displayControl;\n    struct DisplayStatus *displayStatus;\n    struct BufferStatus *bufferStatus;\n    struct BufferAddress *bufferAddress;\n    Pixel *pixel;\n  } r;\n} Register;\n\n\n\n\nextern buf DMA_IO_FrameBuffer;\nstruct ControlRegisters controlRegisters;\n\nvoid InitControlRegisters()\n{\n	struct ControlRegisters *cr = &controlRegisters;\n\n	cr->revision = (struct Revision) { MAJOR_REV, MINOR_REV }; // revision\n	cr->scratchPad = 0; //scratch\n	cr->environStatus = (struct EnvironStatus) {}; //env status\n\n	cr->displayControl = \n			(struct DisplayControl) { 0, NUM_LEDS_PER_CHANNEL, NUM_CHANNELS, MAX_NUM_CHANNELS }; // display control\n	cr->displayStatus =\n			(struct DisplayStatus) { DEFAULT_BRIGHTNESS, DEFAULT_FRAMERATE, 0};                 // display status\n	cr->displayMode = DISPLAYMODE_DEMO1;                                           // display mode\n	cr->displayError = 0;                                                           // display error\n\n	cr->bufferStatus = (struct BufferStatus) { 1, 1 };    // buffer status\n	cr->bufferAddress = (struct BufferAddress) { 0, 0, 0, 1 };  // buffer address\n	cr->bufferValue = CBlack;           // buffer value\n	cr->bufferError = 0;           // buffer error\n\n	frameBuffer = DMA_IO_FrameBuffer;\n}\n\n\n\nvoid readControlRegister(struct ControlRegisters *cr, Register *reg, uint32_t address)\n{\n	int invalidAccess = 0;\n	// default\n	reg->action = noRegAction;\n	reg->access = rwRegAccess;\n\n	if (address == REVISION_OFFSET){\n		reg->type = regRevision;\n		reg->r.revision = &cr->revision;\n	}\n	\n	else if (address == SCRATCHPAD_OFFSET) {\n		reg->type = reg32;\n		reg->r.reg32 = &cr->scratchPad;\n	}\n	\n	else if (address < ENVIRONSTATUS_OFFSET + 0x110)\n	{\n		uint32_t subaddr = address - 0x100;\n		if (subaddr < 0x100 && (subaddr % 4 == 0)) {\n			reg->type = reg32;\n			reg->r.reg32 = (uint32_t*)((uint32_t)&cr->environStatus + subaddr);\n		}\n\n		else if (subaddr < 0x110) {\n			reg->type = reg8;\n			reg->r.reg8 = &cr->environStatus.faults[subaddr - 0x110];\n		}\n		else invalidAccess = 1;\n	}\n	\n	else if (address <= DISPLAY_ERROR_OFFSET)\n	{\n		if (address == DISPLAYCONTROL_OFFSET) {\n			reg->type = regDisplayControl;\n			reg->r.displayControl = &cr->displayControl;\n		}\n\n		else if (address == DISPLAYSTATUS_OFFSET) {\n			reg->type = regDisplayStatus;\n			reg->r.displayStatus = &cr->displayStatus;\n		}\n\n		else if (address == DISPLAYMODE_OFFSET) {\n			reg->type = reg8;\n			reg->r.reg8 = &cr->displayMode;\n		}\n		else if (address == DISPLAY_ERROR_OFFSET) {\n			reg->type = reg8;\n			reg->action = clear_on_read;\n			reg->r.reg8 = &cr->displayError;\n		}\n\n		else invalidAccess = 1;\n	}\n\n	else if (address <= BUFFERERROR_OFFSET)\n	{\n		if (address == BUFFERSTATUS_OFFSET) {\n			reg->type = regBufferStatus;\n			reg->r.bufferStatus = &cr->bufferStatus;\n		}\n	\n		else if (address == BUFFERADDRESS_OFFSET) {\n			reg->type = regBufferAddress;\n			reg->r.bufferAddress = &cr->bufferAddress;\n		}\n	\n		else if (address == BUFFERVALUE_OFFSET) {\n			reg->type = regPixel;\n			reg->action = funcBufferAccess;\n			reg->r.pixel = &cr->bufferValue;\n		}\n	\n		else if (address == BUFFERERROR_OFFSET) {\n			reg->type = reg8;\n			reg->action = clear_on_read;\n			reg->r.reg8 = &cr->bufferError;\n		}\n	\n		else invalidAccess = 1;\n	}\n\n	else invalidAccess = 1;\n\n	if (invalidAccess) {\n		cr->accessStatus |= INVALID_ACCESS;\n		reg->type = invalid;\n		return;\n	}\n	else\n	{\n		cr->accessStatus |= UPDATE_VALID_ACCESS;\n		return;\n	}\n}\n\n\nHandleRegAccessFlag handleRegReadAction(struct ControlRegisters *cr, Register reg)\n{\n	int valid = 1;\n\n	if (reg.action == clear_on_read)\n		if (reg.type == reg8) // only valid case for now\n			return clearOnReadAccess;\n\n	/* begin buffer access handler */\n	if (reg.action == funcBufferAccess)\n	{ \n		uint8_t pixelId = cr->bufferAddress.pixelId;\n		uint8_t chanId = cr->bufferAddress.channelId;\n		uint8_t frameId = cr->bufferAddress.frameId;\n		\n		uint8_t maxLed = cr->displayControl.numberLedsPerChannel;\n		uint8_t maxCh  = cr->displayControl.numberOfChannels;\n		uint8_t maxFrame = cr->bufferStatus.numberOfFrames;\n\n		if (cr->bufferAddress.increment)\n		{\n			pixelId++;\n\n			if (pixelId == maxLed)\n			{\n				pixelId = 0;\n				chanId++;\n			}\n			if (chanId == maxCh)\n			{\n				chanId = 0;\n				frameId++;\n			}\n			if (frameId == maxFrame)\n			{\n				// flag last valid pixel written\n				cr->bufferError |= BUFFER_ERROR_LASTPIXEL;\n				frameId = 0;\n			}\n\n			cr->bufferAddress.pixelId = pixelId;\n			cr->bufferAddress.channelId = chanId;\n			cr->bufferAddress.frameId = frameId;\n		}\n\n		if (pixelId >= maxLed) {\n			valid = 0;\n			cr->bufferError |= BUFFER_ERROR_PIXELID;\n		}\n\n		if (chanId >= maxCh) {\n			valid = 0;\n			cr->bufferError |= BUFFER_ERROR_CHANNELID;\n		}\n\n		if (frameId >= maxFrame) {\n			valid = 0;\n			cr->bufferError |= BUFFER_ERROR_FRAMEID;\n		}\n\n		if (valid)\n			// actually grab data from the buffer\n			*reg.r.pixel = FB_GetPixel(frameBuffer, chanId, pixelId);\n	}\n	/* end buffer access handler */\n\n	return valid ? validAccess : invalidAccess;\n}\n\n\n\nHandleRegAccessFlag handleRegWriteAction(struct ControlRegisters *cr, Register reg)\n{\n	int valid = 1;\n\n	if (reg.access == read_only)\n		return readOnlyAccess;\n\n	/* begin buffer access handler */\n	if (reg.action == funcBufferAccess)\n	{ \n		uint8_t pixelId = cr->bufferAddress.pixelId;\n		uint8_t chanId = cr->bufferAddress.channelId;\n		uint8_t frameId = cr->bufferAddress.frameId;\n		\n		uint8_t maxLed = cr->displayControl.numberLedsPerChannel;\n		uint8_t maxCh  = cr->displayControl.numberOfChannels;\n		uint8_t maxFrame = cr->bufferStatus.numberOfFrames;\n\n		if (pixelId >= maxLed) {\n			valid = 0;\n			cr->bufferError |= BUFFER_ERROR_PIXELID;\n		}\n\n		if (chanId >= maxCh) {\n			valid = 0;\n			cr->bufferError |= BUFFER_ERROR_CHANNELID;\n		}\n\n		if (frameId >= maxFrame) {\n			valid = 0;\n			cr->bufferError |= BUFFER_ERROR_FRAMEID;\n		}\n\n		if (valid)\n			// actually set data in the buffer\n			FB_SetPixel(frameBuffer, chanId, pixelId, *reg.r.pixel);\n		else\n			return invalidAccess;\n\n		if (cr->bufferAddress.increment)\n		{\n			pixelId++;\n\n			if (pixelId == maxLed)\n			{\n				pixelId = 0;\n				chanId++;\n			}\n			if (chanId == maxCh)\n			{\n				chanId = 0;\n				frameId++;\n			}\n			if (frameId == maxFrame)\n			{\n				// flag last valid pixel written\n				cr->bufferError |= BUFFER_ERROR_LASTPIXEL;\n				frameId = 0;\n			}\n\n			cr->bufferAddress.pixelId = pixelId;\n			cr->bufferAddress.channelId = chanId;\n			cr->bufferAddress.frameId = frameId;\n		}\n	}\n	/* end buffer access handler */\n\n	if (reg.action == funcSetDemo1Brightness)\n\n	return valid ? validAccess : invalidAccess;\n}\n\n\nvoid RawRegisterRead(uint address, RawRegReadValue *rv)\n{	\n	Register reg = {};\n	readControlRegister(&controlRegisters, &reg, address);\n	\n	rv->flag = handleRegReadAction(&controlRegisters, reg);\n	\n	if (rv->flag == invalidAccess)\n		rv->reg = 0;\n	\n	else // valid or clearOnRead\n		switch (reg.type)\n		{\n			case reg8: rv->reg = (uint32_t) *reg.r.reg8; break;\n			case reg16: rv->reg = (uint32_t) *reg.r.reg16; break;\n			case reg32: rv->reg = *reg.r.reg32; break;\n			case regRevision: rv->reg = *(uint32_t*)reg.r.revision; break;\n			case regDisplayControl: rv->reg = *(uint32_t*)reg.r.displayControl; break;\n			case regDisplayStatus: rv->reg = *(uint32_t*)reg.r.displayStatus; break;\n			case regBufferStatus: rv->reg = *(uint32_t*)reg.r.bufferStatus & 0x0000ffFF; break;\n			case regBufferAddress: rv->reg = *(uint32_t*)reg.r.bufferAddress; break;\n			case regPixel: rv->reg = *(uint32_t*)reg.r.pixel & 0x00ffFFff; break;\n			case invalid:\n			default:\n				rv->reg = 0; break;\n		}\n\n	if (rv->flag == clearOnReadAccess)\n		*reg.r.reg8 = 0; // only have this type now, so no need for switch on type\n\n	return;\n}\n\n\nHandleRegAccessFlag RawRegisterWrite(uint address, uint32_t value)\n{\n	Register reg = {};\n	readControlRegister(&controlRegisters, &reg, address);\n\n	if (reg.access != read_only)\n		switch (reg.type)\n		{\n			case reg8: *reg.r.reg8 = (uint8_t) value; break;\n			case reg16: *reg.r.reg16 = (uint16_t) value; break;\n			case reg32: *reg.r.reg32 = value; break;\n			case regRevision: *(uint32_t*)reg.r.revision = value; break;\n			case regDisplayControl: *(uint32_t*)reg.r.displayControl = value; break;\n			case regDisplayStatus: *(uint32_t*)reg.r.displayStatus = value; break;\n			case regBufferStatus:\n					*(uint16_t*)reg.r.bufferStatus = value;\n					break;\n			case regBufferAddress: *(uint32_t*)reg.r.bufferAddress = value; break;\n			case regPixel:\n					*(uint32_t*)reg.r.pixel &= ~0x00ffFFff;\n					*(uint32_t*)reg.r.pixel |= (value & 0x00ffFFff);\n					break;\n			case invalid: return invalidAccess;\n			default: return invalidAccess;\n		}\n\n	return handleRegWriteAction(&controlRegisters, reg);\n}",
			"file": "Src/ControlRegisters.c",
			"file_size": 10860,
			"file_write_time": 131106908880946348,
			"settings":
			{
				"buffer_size": 10904,
				"line_ending": "Unix",
				"name": "// ControlRegisters.c"
			}
		},
		{
			"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s",
			"settings":
			{
				"buffer_size": 22026,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/home/steven/STM32CubeMX/ledstrips_nucleo/Inc/spi.h",
			"settings":
			{
				"buffer_size": 2716,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/syscalls.c",
			"settings":
			{
				"buffer_size": 2881,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Inc/usart.h",
			"settings":
			{
				"buffer_size": 582,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Inc/stm32f4xx_hal_conf.h",
			"settings":
			{
				"buffer_size": 17387,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/dma.c",
			"settings":
			{
				"buffer_size": 3066,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/tim.c",
			"settings":
			{
				"buffer_size": 11392,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Inc/tim.h",
			"settings":
			{
				"buffer_size": 3185,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/gpio.c",
			"settings":
			{
				"buffer_size": 4273,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Inc/gpio.h",
			"settings":
			{
				"buffer_size": 2782,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/stm32f4xx_it.c",
			"settings":
			{
				"buffer_size": 4106,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h",
			"settings":
			{
				"buffer_size": 73835,
				"line_ending": "Windows"
			}
		},
		{
			"file": "colors.out",
			"settings":
			{
				"buffer_size": 24060,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c",
			"settings":
			{
				"buffer_size": 65373,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h",
			"settings":
			{
				"buffer_size": 38364,
				"line_ending": "Windows"
			}
		},
		{
			"file": "colors.c",
			"settings":
			{
				"buffer_size": 963,
				"line_ending": "Unix"
			}
		},
		{
			"file": "STM32F401RETx_FLASH.ld",
			"settings":
			{
				"buffer_size": 5677,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c",
			"settings":
			{
				"buffer_size": 174367,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h",
			"settings":
			{
				"buffer_size": 13616,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h",
			"settings":
			{
				"buffer_size": 317893,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 16 files for \"IRQHandler\" (case sensitive)\n\n/home/steven/projects/ledstrips_nucleo/Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s:\n  173    \n  174    /* External Interrupts */\n  175:   .word     WWDG_IRQHandler                   /* Window WatchDog              */                                        \n  176:   .word     PVD_IRQHandler                    /* PVD through EXTI Line detection */                        \n  177:   .word     TAMP_STAMP_IRQHandler             /* Tamper and TimeStamps through the EXTI line */            \n  178:   .word     RTC_WKUP_IRQHandler               /* RTC Wakeup through the EXTI line */                      \n  179:   .word     FLASH_IRQHandler                  /* FLASH                        */                                          \n  180:   .word     RCC_IRQHandler                    /* RCC                          */                                            \n  181:   .word     EXTI0_IRQHandler                  /* EXTI Line0                   */                        \n  182:   .word     EXTI1_IRQHandler                  /* EXTI Line1                   */                          \n  183:   .word     EXTI2_IRQHandler                  /* EXTI Line2                   */                          \n  184:   .word     EXTI3_IRQHandler                  /* EXTI Line3                   */                          \n  185:   .word     EXTI4_IRQHandler                  /* EXTI Line4                   */                          \n  186:   .word     DMA1_Stream0_IRQHandler           /* DMA1 Stream 0                */                  \n  187:   .word     DMA1_Stream1_IRQHandler           /* DMA1 Stream 1                */                   \n  188:   .word     DMA1_Stream2_IRQHandler           /* DMA1 Stream 2                */                   \n  189:   .word     DMA1_Stream3_IRQHandler           /* DMA1 Stream 3                */                   \n  190:   .word     DMA1_Stream4_IRQHandler           /* DMA1 Stream 4                */                   \n  191:   .word     DMA1_Stream5_IRQHandler           /* DMA1 Stream 5                */                   \n  192:   .word     DMA1_Stream6_IRQHandler           /* DMA1 Stream 6                */                   \n  193:   .word     ADC_IRQHandler                    /* ADC1, ADC2 and ADC3s         */                   \n  194    .word     0               				  /* Reserved                      */                         \n  195    .word     0              					  /* Reserved                     */                          \n  196    .word     0                                 /* Reserved                     */                          \n  197    .word     0                                 /* Reserved                     */                          \n  198:   .word     EXTI9_5_IRQHandler                /* External Line[9:5]s          */                          \n  199:   .word     TIM1_BRK_TIM9_IRQHandler          /* TIM1 Break and TIM9          */         \n  200:   .word     TIM1_UP_TIM10_IRQHandler          /* TIM1 Update and TIM10        */         \n  201:   .word     TIM1_TRG_COM_TIM11_IRQHandler     /* TIM1 Trigger and Commutation and TIM11 */\n  202:   .word     TIM1_CC_IRQHandler                /* TIM1 Capture Compare         */                          \n  203:   .word     TIM2_IRQHandler                   /* TIM2                         */                   \n  204:   .word     TIM3_IRQHandler                   /* TIM3                         */                   \n  205:   .word     TIM4_IRQHandler                   /* TIM4                         */                   \n  206:   .word     I2C1_EV_IRQHandler                /* I2C1 Event                   */                          \n  207:   .word     I2C1_ER_IRQHandler                /* I2C1 Error                   */                          \n  208:   .word     I2C2_EV_IRQHandler                /* I2C2 Event                   */                          \n  209:   .word     I2C2_ER_IRQHandler                /* I2C2 Error                   */                            \n  210:   .word     SPI1_IRQHandler                   /* SPI1                         */                   \n  211:   .word     SPI2_IRQHandler                   /* SPI2                         */                   \n  212:   .word     USART1_IRQHandler                 /* USART1                       */                   \n  213:   .word     USART2_IRQHandler                 /* USART2                       */                   \n  214    .word     0               				  /* Reserved                       */                   \n  215:   .word     EXTI15_10_IRQHandler              /* External Line[15:10]s        */                          \n  216:   .word     RTC_Alarm_IRQHandler              /* RTC Alarm (A and B) through EXTI Line */                 \n  217:   .word     OTG_FS_WKUP_IRQHandler            /* USB OTG FS Wakeup through EXTI line */                       \n  218    .word     0                                 /* Reserved     				  */         \n  219    .word     0                                 /* Reserved       			  */         \n  220    .word     0                                 /* Reserved 					  */\n  221    .word     0                                 /* Reserved                     */                          \n  222:   .word     DMA1_Stream7_IRQHandler           /* DMA1 Stream7                 */                          \n  223    .word     0                                 /* Reserved                     */                   \n  224:   .word     SDIO_IRQHandler                   /* SDIO                         */                   \n  225:   .word     TIM5_IRQHandler                   /* TIM5                         */                   \n  226:   .word     SPI3_IRQHandler                   /* SPI3                         */                   \n  227    .word     0                                 /* Reserved                     */                   \n  228    .word     0                                 /* Reserved                     */                   \n  229    .word     0                                 /* Reserved                     */                   \n  230    .word     0                                 /* Reserved                     */\n  231:   .word     DMA2_Stream0_IRQHandler           /* DMA2 Stream 0                */                   \n  232:   .word     DMA2_Stream1_IRQHandler           /* DMA2 Stream 1                */                   \n  233:   .word     DMA2_Stream2_IRQHandler           /* DMA2 Stream 2                */                   \n  234:   .word     DMA2_Stream3_IRQHandler           /* DMA2 Stream 3                */                   \n  235:   .word     DMA2_Stream4_IRQHandler           /* DMA2 Stream 4                */                   \n  236    .word     0                    			  /* Reserved                     */                   \n  237    .word     0              					  /* Reserved                     */                     \n  ...\n  240    .word     0              					  /* Reserved                     */                          \n  241    .word     0              					  /* Reserved                     */                          \n  242:   .word     OTG_FS_IRQHandler                 /* USB OTG FS                   */                   \n  243:   .word     DMA2_Stream5_IRQHandler           /* DMA2 Stream 5                */                   \n  244:   .word     DMA2_Stream6_IRQHandler           /* DMA2 Stream 6                */                   \n  245:   .word     DMA2_Stream7_IRQHandler           /* DMA2 Stream 7                */                   \n  246:   .word     USART6_IRQHandler                 /* USART6                       */                    \n  247:   .word     I2C3_EV_IRQHandler                /* I2C3 event                   */                          \n  248:   .word     I2C3_ER_IRQHandler                /* I2C3 error                   */                          \n  249    .word     0                                 /* Reserved                     */                   \n  250    .word     0                                 /* Reserved                     */                   \n  ...\n  254    .word     0                                 /* Reserved                     */                   \n  255    .word     0                                 /* Reserved                     */\n  256:   .word     FPU_IRQHandler                    /* FPU                          */\n  257    .word     0                                 /* Reserved                     */                   \n  258    .word     0                                 /* Reserved                     */\n  259:   .word     SPI4_IRQHandler                   /* SPI4                         */     \n  260                      \n  261  /*******************************************************************************\n  ...\n  293     .thumb_set SysTick_Handler,Default_Handler              \n  294    \n  295:    .weak      WWDG_IRQHandler                   \n  296:    .thumb_set WWDG_IRQHandler,Default_Handler      \n  297                    \n  298:    .weak      PVD_IRQHandler      \n  299:    .thumb_set PVD_IRQHandler,Default_Handler\n  300                 \n  301:    .weak      TAMP_STAMP_IRQHandler            \n  302:    .thumb_set TAMP_STAMP_IRQHandler,Default_Handler\n  303              \n  304:    .weak      RTC_WKUP_IRQHandler                  \n  305:    .thumb_set RTC_WKUP_IRQHandler,Default_Handler\n  306              \n  307:    .weak      FLASH_IRQHandler         \n  308:    .thumb_set FLASH_IRQHandler,Default_Handler\n  309                    \n  310:    .weak      RCC_IRQHandler      \n  311:    .thumb_set RCC_IRQHandler,Default_Handler\n  312                    \n  313:    .weak      EXTI0_IRQHandler         \n  314:    .thumb_set EXTI0_IRQHandler,Default_Handler\n  315                    \n  316:    .weak      EXTI1_IRQHandler         \n  317:    .thumb_set EXTI1_IRQHandler,Default_Handler\n  318                       \n  319:    .weak      EXTI2_IRQHandler         \n  320:    .thumb_set EXTI2_IRQHandler,Default_Handler \n  321                   \n  322:    .weak      EXTI3_IRQHandler         \n  323:    .thumb_set EXTI3_IRQHandler,Default_Handler\n  324                          \n  325:    .weak      EXTI4_IRQHandler         \n  326:    .thumb_set EXTI4_IRQHandler,Default_Handler\n  327                    \n  328:    .weak      DMA1_Stream0_IRQHandler               \n  329:    .thumb_set DMA1_Stream0_IRQHandler,Default_Handler\n  330           \n  331:    .weak      DMA1_Stream1_IRQHandler               \n  332:    .thumb_set DMA1_Stream1_IRQHandler,Default_Handler\n  333                    \n  334:    .weak      DMA1_Stream2_IRQHandler               \n  335:    .thumb_set DMA1_Stream2_IRQHandler,Default_Handler\n  336                    \n  337:    .weak      DMA1_Stream3_IRQHandler               \n  338:    .thumb_set DMA1_Stream3_IRQHandler,Default_Handler \n  339                   \n  340:    .weak      DMA1_Stream4_IRQHandler              \n  341:    .thumb_set DMA1_Stream4_IRQHandler,Default_Handler\n  342                    \n  343:    .weak      DMA1_Stream5_IRQHandler               \n  344:    .thumb_set DMA1_Stream5_IRQHandler,Default_Handler\n  345                    \n  346:    .weak      DMA1_Stream6_IRQHandler               \n  347:    .thumb_set DMA1_Stream6_IRQHandler,Default_Handler\n  348                    \n  349:    .weak      ADC_IRQHandler      \n  350:    .thumb_set ADC_IRQHandler,Default_Handler\n  351              \n  352:    .weak      EXTI9_5_IRQHandler   \n  353:    .thumb_set EXTI9_5_IRQHandler,Default_Handler\n  354              \n  355:    .weak      TIM1_BRK_TIM9_IRQHandler            \n  356:    .thumb_set TIM1_BRK_TIM9_IRQHandler,Default_Handler\n  357              \n  358:    .weak      TIM1_UP_TIM10_IRQHandler            \n  359:    .thumb_set TIM1_UP_TIM10_IRQHandler,Default_Handler\n  360        \n  361:    .weak      TIM1_TRG_COM_TIM11_IRQHandler      \n  362:    .thumb_set TIM1_TRG_COM_TIM11_IRQHandler,Default_Handler\n  363        \n  364:    .weak      TIM1_CC_IRQHandler   \n  365:    .thumb_set TIM1_CC_IRQHandler,Default_Handler\n  366                    \n  367:    .weak      TIM2_IRQHandler            \n  368:    .thumb_set TIM2_IRQHandler,Default_Handler\n  369                    \n  370:    .weak      TIM3_IRQHandler            \n  371:    .thumb_set TIM3_IRQHandler,Default_Handler\n  372                    \n  373:    .weak      TIM4_IRQHandler            \n  374:    .thumb_set TIM4_IRQHandler,Default_Handler\n  375                    \n  376:    .weak      I2C1_EV_IRQHandler   \n  377:    .thumb_set I2C1_EV_IRQHandler,Default_Handler\n  378                       \n  379:    .weak      I2C1_ER_IRQHandler   \n  380:    .thumb_set I2C1_ER_IRQHandler,Default_Handler\n  381                       \n  382:    .weak      I2C2_EV_IRQHandler   \n  383:    .thumb_set I2C2_EV_IRQHandler,Default_Handler\n  384                    \n  385:    .weak      I2C2_ER_IRQHandler   \n  386:    .thumb_set I2C2_ER_IRQHandler,Default_Handler\n  387                             \n  388:    .weak      SPI1_IRQHandler            \n  389:    .thumb_set SPI1_IRQHandler,Default_Handler\n  390                          \n  391:    .weak      SPI2_IRQHandler            \n  392:    .thumb_set SPI2_IRQHandler,Default_Handler\n  393                    \n  394:    .weak      USART1_IRQHandler      \n  395:    .thumb_set USART1_IRQHandler,Default_Handler\n  396                       \n  397:    .weak      USART2_IRQHandler      \n  398:    .thumb_set USART2_IRQHandler,Default_Handler\n  399                                    \n  400:    .weak      EXTI15_10_IRQHandler               \n  401:    .thumb_set EXTI15_10_IRQHandler,Default_Handler\n  402                 \n  403:    .weak      RTC_Alarm_IRQHandler               \n  404:    .thumb_set RTC_Alarm_IRQHandler,Default_Handler\n  405              \n  406:    .weak      OTG_FS_WKUP_IRQHandler         \n  407:    .thumb_set OTG_FS_WKUP_IRQHandler,Default_Handler\n  408              \n  409:    .weak      DMA1_Stream7_IRQHandler               \n  410:    .thumb_set DMA1_Stream7_IRQHandler,Default_Handler\n  411                       \n  412:    .weak      SDIO_IRQHandler            \n  413:    .thumb_set SDIO_IRQHandler,Default_Handler\n  414                       \n  415:    .weak      TIM5_IRQHandler            \n  416:    .thumb_set TIM5_IRQHandler,Default_Handler\n  417                       \n  418:    .weak      SPI3_IRQHandler            \n  419:    .thumb_set SPI3_IRQHandler,Default_Handler\n  420                       \n  421:    .weak      DMA2_Stream0_IRQHandler               \n  422:    .thumb_set DMA2_Stream0_IRQHandler,Default_Handler\n  423                 \n  424:    .weak      DMA2_Stream1_IRQHandler               \n  425:    .thumb_set DMA2_Stream1_IRQHandler,Default_Handler\n  426                    \n  427:    .weak      DMA2_Stream2_IRQHandler               \n  428:    .thumb_set DMA2_Stream2_IRQHandler,Default_Handler\n  429              \n  430:    .weak      DMA2_Stream3_IRQHandler               \n  431:    .thumb_set DMA2_Stream3_IRQHandler,Default_Handler\n  432              \n  433:    .weak      DMA2_Stream4_IRQHandler               \n  434:    .thumb_set DMA2_Stream4_IRQHandler,Default_Handler\n  435              \n  436:    .weak      OTG_FS_IRQHandler      \n  437:    .thumb_set OTG_FS_IRQHandler,Default_Handler\n  438                       \n  439:    .weak      DMA2_Stream5_IRQHandler               \n  440:    .thumb_set DMA2_Stream5_IRQHandler,Default_Handler\n  441                    \n  442:    .weak      DMA2_Stream6_IRQHandler               \n  443:    .thumb_set DMA2_Stream6_IRQHandler,Default_Handler\n  444                    \n  445:    .weak      DMA2_Stream7_IRQHandler               \n  446:    .thumb_set DMA2_Stream7_IRQHandler,Default_Handler\n  447                    \n  448:    .weak      USART6_IRQHandler      \n  449:    .thumb_set USART6_IRQHandler,Default_Handler\n  450                          \n  451:    .weak      I2C3_EV_IRQHandler   \n  452:    .thumb_set I2C3_EV_IRQHandler,Default_Handler\n  453                          \n  454:    .weak      I2C3_ER_IRQHandler   \n  455:    .thumb_set I2C3_ER_IRQHandler,Default_Handler\n  456                          \n  457:    .weak      FPU_IRQHandler                  \n  458:    .thumb_set FPU_IRQHandler,Default_Handler  \n  459  \n  460:    .weak      SPI4_IRQHandler                  \n  461:    .thumb_set SPI4_IRQHandler,Default_Handler \n  462  \n  463  /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/\n\n/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h:\n  674  HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma);\n  675  HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout);\n  676: void              HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma);\n  677  HAL_StatusTypeDef HAL_DMA_CleanCallbacks(DMA_HandleTypeDef *hdma);\n  678  HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma));\n\n/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h:\n  255  void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);\n  256  HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);\n  257: void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);\n  258  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);\n  259  \n\n/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h:\n 1266    */\n 1267  /* Interrupt Handler functions  **********************************************/\n 1268: void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim);\n 1269  \n 1270  /**\n\n/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c:\n   44                Source address and destination address and the Length of data to be transferred. In this \n   45                case the DMA interrupt is configured \n   46:           (+) Use HAL_DMA_IRQHandler() called under DMA_IRQHandler() Interrupt subroutine\n   47:           (+) At the end of data transfer HAL_DMA_IRQHandler() function is executed and user can \n   48                add his own function by customization of function pointer XferCpltCallback and \n   49                XferErrorCallback (i.e a member of DMA handle structure).\n   ..\n  299  \n  300    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate\n  301:      DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */\n  302    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);\n  303    \n  ...\n  738    * @retval None\n  739    */\n  740: void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)\n  741  {\n  742    uint32_t tmpisr;\n\n/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c:\n 2797    * @retval None\n 2798    */\n 2799: void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)\n 2800  {\n 2801    /* Capture compare 1 event */\n\n/home/steven/projects/ledstrips_nucleo/Src/stm32f4xx_it.c:\n   59    /* USER CODE END SysTick_IRQn 0 */\n   60    HAL_IncTick();\n   61:   HAL_SYSTICK_IRQHandler();\n   62    /* USER CODE BEGIN SysTick_IRQn 1 */\n   63  \n   ..\n   75  * @brief This function handles DMA2 stream1 global interrupt.\n   76  */\n   77: void DMA2_Stream1_IRQHandler(void)\n   78  {\n   79  \n   80:   HAL_DMA_IRQHandler(&hdma_timx_gpio_data);\n   81  \n   82  }\n   ..\n   85  * @brief This function handles DMA2 stream2 global interrupt.\n   86  */\n   87: void DMA2_Stream2_IRQHandler(void)\n   88  {\n   89  \n   90:   HAL_DMA_IRQHandler(&hdma_timx_gpio_low);\n   91  \n   92  }\n   ..\n   95  * @brief This function handles DMA2 stream5 global interrupt.\n   96  */\n   97: void DMA2_Stream5_IRQHandler(void)\n   98  {\n   99  \n  100:   HAL_DMA_IRQHandler(&hdma_timx_gpio_high);\n  101  \n  102  }\n  103  \n  104: void TIM1_IRQHandler(void)\n  105  {\n  106:   HAL_TIM_IRQHandler(&htimx);\n  107  }\n  108  \n\n186 matches across 7 files\n",
			"settings":
			{
				"buffer_size": 20121,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/steven/STM32Cube/Repository/STM32Cube_FW_F4_V1.12.0/Projects/STM32F429I-Discovery/Transmission/Src/main.c",
			"settings":
			{
				"buffer_size": 25404,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h",
			"settings":
			{
				"buffer_size": 37928,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c",
			"settings":
			{
				"buffer_size": 40436,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/FrameBuffer.c",
			"settings":
			{
				"buffer_size": 3466,
				"line_ending": "Unix",
				"name": "// FrameBuffer.c"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 2095,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/**\n  ******************************************************************************\n  * File Name          : main.c\n  * Description        : Main program body\n  ******************************************************************************\n  *\n  * COPYRIGHT(c) 2016 STMicroelectronics\n  *\n  * Redistribution and use in source and binary forms, with or without modification,\n  * are permitted provided that the following conditions are met:\n  *   1. Redistributions of source code must retain the above copyright notice,\n  *      this list of conditions and the following disclaimer.\n  *   2. Redistributions in binary form must reproduce the above copyright notice,\n  *      this list of conditions and the following disclaimer in the documentation\n  *      and/or other materials provided with the distribution.\n  *   3. Neither the name of STMicroelectronics nor the names of its contributors\n  *      may be used to endorse or promote products derived from this software\n  *      without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  *\n  ******************************************************************************\n  */\n/* Includes ------------------------------------------------------------------*/\n#include \"stm32f4xx_hal.h\"\n#include \"dma.h\"\n#include \"tim.h\"\n#include \"usart.h\"\n#include \"gpio.h\"\n\n#include \"ControlRegisters.h\"\n\n/* USER CODE BEGIN Includes */\n#include \"stdlib.h\"\n#include \"string.h\"\n#include \"math.h\"\n#define PI 3.1415926\n/* USER CODE END Includes */\n\n\n/* Private variables ---------------------------------------------------------*/\n\n/* USER CODE BEGIN PV */\n/* Private variables ---------------------------------------------------------*/\n\n#define MAJOR_REV 0\n#define MINOR_REV 1\n\n// buffer size is num_leds * 24 bits/led\n// 60 * 24 = 1440\n#define BUFFSIZE 1440*2\n#define NUM_CHANNELS 8\n#define NUM_LEDS_PER_CHANNEL 60*2\n#define MAX_NUM_CHANNELS 8\n\n#define DEFAULT_BRIGHTNESS 50\n#define DEFAULT_FRAMERATE  10\n\n\n#include \"FrameBuffer.h\"\n\n// put these in memory so they can be copied via DMA\nuint32_t _rawBuffer[BUFFSIZE/4];  //make aligned\nbuf      DMA_IO_FrameBuffer = (buf) &_rawBuffer;\nuint32_t DMA_IO_High = 0xFFFFFFFFU;\nuint32_t DMA_IO_Low  = 0x00000000U;\n\nvolatile uint8_t WS2812_TransferComplete = 1;\n\n\nextern TIM_HandleTypeDef htimx;\nextern DMA_HandleTypeDef hdma_timx_gpio_low;     // DMA1_stream4 sets data gpios low\nextern DMA_HandleTypeDef hdma_timx_gpio_data;    // DMA1_stream5 sets data gpios to buffer value\nextern DMA_HandleTypeDef hdma_timx_gpio_high;    // DMA1_stream6 sets data gpios high\nextern UART_HandleTypeDef huart2;\n\n\n\n\n\nvolatile int showFrameDebug = 1;\nvolatile int serialEchoEnabled = 1;\nint globalBrightness = 50;\nint globalFrameDelay = 100;\n\n\n\n\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\nvoid Error_Handler(void);\nvoid DebugGood_Handler(void);\nvoid Debug_Setup(void);\n\n\nvoid DMA_IO_SendBuffer(buf frameData, uint16_t buffsize);\n\n\nvoid DisplayLedDemo(void);\n\nint serialDoRawRegisterRead(char* args);\nint serialDoRawRegisterWrite(char* args);\n\n\n/* USER CODE END PFP */\n\n/* USER CODE BEGIN 0 */\n\n\nGPIO_TypeDef *GpioC;\n\nvoid Debug_Setup(void)\n{\n  GpioC = (GPIO_TypeDef*)GPIOC;\n\n  // enable usasge error handler status reg\n  *((uint32_t*)0xe000ed24) = 0x70000;\n}\n\nvoid DMA_IO_SendBuffer(buf frameBuffer, uint16_t buffsize)\n{\n  while(!WS2812_TransferComplete) HAL_Delay(1);\n  WS2812_TransferComplete = 0;\n\n  // Enable DMA\n  if (HAL_DMA_Start_IT(&hdma_timx_gpio_high,\n                       (uint32_t)&DMA_IO_High,\n                       (uint32_t)&(GPIOC->ODR),\n                       buffsize)\n      != HAL_OK) Error_Handler();\n\n  if (HAL_DMA_Start_IT(&hdma_timx_gpio_data,\n                       (uint32_t)frameBuffer,\n                       (uint32_t)&(GPIOC->ODR),\n                       buffsize)\n      != HAL_OK) Error_Handler();\n  \n  if (HAL_DMA_Start_IT(&hdma_timx_gpio_low,\n                       (uint32_t)&DMA_IO_Low,\n                       (uint32_t)&(GPIOC->ODR),\n                       buffsize)\n     != HAL_OK) Error_Handler();\n\n\n\n  __HAL_TIM_ENABLE_DMA(&htimx, TIM_DMA_UPDATE);\n  __HAL_TIM_ENABLE_DMA(&htimx, TIM_DMA_CC1);\n  __HAL_TIM_ENABLE_DMA(&htimx, TIM_DMA_CC2);\n\n  __HAL_TIM_CLEAR_FLAG(&htimx, (uint16_t)0xFFFFU); // clear all\n  // Start counter at max value so UPDATE IT is generated immediately\n  __HAL_TIM_SET_COUNTER(&htimx, (uint16_t)(DATA_TIM_PERIOD - 1));\n\n  // Enable the timer to kick things off\n  __HAL_TIM_ENABLE(&htimx);\n\n}\n\n\nfloat triangleWave(int period, float amplitude, int phase, int d)\n{\n  int p = phase % 360;\n  float t = (360.0/period * d) - p;\n\n  if (t>=180) return amplitude * (-1 + (t-180)/90);\n  else        return amplitude * (1 - t/90);\n}\n\nvoid rainbowShiftIterateFrame(buf fb, int d)\n{\n    int i;\n    float w;\n    Pixel c;\n    static PixelBlock pixelBlockNext;\n\n    c = ColorTable[d%COLOR_TABLE_LEN];\n    for (i=0; i<NUM_CHANNELS; i++) {\n     /* w = triangleWave(450, 4.0, 0, d+80*i);\n      if (w > 1) w = 1.0/w;\n        else if (w < -1) w = -w;\n        else w = 1.0; */\n      //w = (float)globalBrightness / 100.0;\n\n      pixelBlockNext[i] = setPixelBrightness(c, demo1_Brightness);\n    }\n\n    for(i = 0; i < NUM_LEDS_PER_CHANNEL; i++)\n      FB_ShiftSetPixel(fb, pixelBlockNext, i);\n\n}\n\nint frameCount = 0;\n\nstruct DemoOneConfig {\n  uint16_t period[MAX_NUM_CHANNELS];\n  uint16_t phase[MAX_NUM_CHANNELS];\n  uint16_t brightness[MAX_NUM_CHANNELS];\n} demoOneConfig;\n\nvoid DisplayLedDemoOne(void)\n{\n  // go for cycle period of 10 sec, or 300 frames\n  //const float w = PI/300;\n\n  demoOneConfig = (struct DemoOneConfig) { {1200}, {0}, {80} };\n\n\n  buf fb = DMA_IO_FrameBuffer;\n\n  while(frameCount++)\n  {\n    //int d = frameCount;\n    //if (!(d%30) || d%30==6) HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);\n\n    rainbowShiftIterateFrame(fb, frameCount);\n\n    DMA_IO_SendBuffer(fb, BUFFSIZE);\n    HAL_Delay(globalFrameDelay);\n\n  }\n}\n\n\nvoid ShowPrompt(void)\n{\n  char prompt[32] = { 0 };\n  char frame[16] = { 0 };\n\n  strncpy(prompt, \"\\r\\n%s> \", sizeof(prompt));\n  strncpy(frame, \"Frame %d \", sizeof(frame));\n\n  if (showFrameDebug) {\n    sprintf(frame, frame, frameCount);\n    printf(prompt, frame);\n  }\n  else printf(prompt, \"\");\n}\n\n\nvoid ParseCommands(char *cmdStr)\n{\n  char cmd[16], args[32];\n  char *csep, *cend;\n  int cmdLen;\n  int rv = 0;\n\n  csep = strchr(cmdStr, ' ');\n  cend = strchr(cmdStr, '\\r');\n  if (!cend) cend = strchr(cmdStr, '\\n');\n  if (csep == NULL || cend == NULL) return;\n\n  cmdLen = csep - cmdStr;\n  strncpy(cmd, cmdStr, cmdLen);\n  strncpy(args, csep+1, cend-csep-1);\n\n  switch (cmd[0])\n  {\n    case 'b':\n      globalBrightness = atoi(args);\n      printf(\"Set brightness: %d\", globalBrightness); break;\n\n    case 'r':\n      globalFrameDelay = atoi(args);\n      printf(\"Set frameDelay: %d\", globalFrameDelay); break;\n\n    case 's':\n      // here 'args' should be a valid \"addr value\"\n      rv = serialDoRawRegisterWrite(args); break;\n\n    case 'g':\n      rv = serialDoRawRegisterRead(args); break;\n\n    default:\n      rv = -1;\n  }\n\n}\n\nuint verifyAddress(char *args, char **sp)\n{\n  long addrL = strtol(args, sp, 16);\n  if (addrL < 0 || addrL > 0xffffu) {\n    printf(\"Error: address out of range (%x)\\n\", (uint)addrL);\n    return -1;\n  }\n  return (uint)addrL;\n}\n\nint serialDoRawRegisterRead(char* args)\n{\n  RawRegReadValue regRead;\n  uint address;\n\n  if ((address = verifyAddress(args, NULL)) == -1)\n    return -1;\n\n  RawRegisterRead(address, &regRead);\n  if (regRead.flag == invalidAccess)\n  {\n    printf(\"Error: address %4x returned 'invalidAccess'\\n\", address);\n    return 2;\n  }\n\n  printf(\"Read: %8x (%4x)\\n\", (uint)regRead.reg, address);\n  return 0;\n}\n\nint serialDoRawRegisterWrite(char *args)\n{\n  char *sp;\n  uint address;\n  long wrVal;\n  HandleRegAccessFlag f;\n\n  if ((address = verifyAddress(args, &sp)) == -1)\n    return -1;\n\n  wrVal = strtol(sp, &sp, 16);\n\n  f = RawRegisterWrite(address, (uint32_t)wrVal);\n  switch (f)\n  {\n    case readOnlyAccess:\n      printf(\"Error: address %4x returned 'readOnlyAccess'\\n\", address);\n      return 4;\n    case invalidAccess:\n      printf(\"Error: address %4x returned 'invalidAccess'\\n\", address);\n      return 2;\n    default:\n      printf(\"Wrote: %8x (%4x)\\n\", (uint)wrVal, address);\n      return 0;\n  }\n}\n\n/* USER CODE END 0 */\n\nint main(void)\n{\n\n  /* USER CODE BEGIN 1 */\n\n  /* USER CODE END 1 */\n\n  /* MCU Configuration----------------------------------------------------------*/\n\n  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  HAL_Init();\n\n  /* Configure the system clock */\n  SystemClock_Config();\n\n  /* Initialize all configured peripherals */\n  MX_GPIO_Init();\n  MX_DMA_Init();\n  MX_TIM1_Init();\n  USART2_Init();\n  HAL_UART_RxCpltCallback(&huart2); // begin rx for loopback\n\n  Debug_Setup();\n\n  /* USER CODE BEGIN 2 */\n\n  for (uint16_t i = 0; i < NUM_LEDS_PER_CHANNEL; i++)\n  {\n    FB_SetPixel(DMA_IO_FrameBuffer, 0, i, CWhite);\n  }\n\n  uint16_t size = BUFFSIZE;\n  while(0);\n  DMA_IO_SendBuffer(DMA_IO_FrameBuffer, size);\n\n  InitControlRegisters();\n  ShowPrompt();\n\n  while (1)\n  {\n\n    while(!WS2812_TransferComplete)\n    {\n      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);\n      HAL_Delay(500);\n    }\n    DebugGood_Handler();\n    //DMA_IO_SendBuffer(DMA_IO_FrameBuffer, BUFFSIZE);\n\n  }\n  /* USER CODE END 3 */\n\n}\n\n/** System Clock Configuration\n*/\nvoid SystemClock_Config(void)\n{\n\n  RCC_OscInitTypeDef RCC_OscInitStruct;\n  RCC_ClkInitTypeDef RCC_ClkInitStruct;\n\n  __HAL_RCC_PWR_CLK_ENABLE();\n\n  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);\n\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;\n  RCC_OscInitStruct.HSIState = RCC_HSI_ON;\n  RCC_OscInitStruct.HSICalibrationValue = 16;\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;\n  RCC_OscInitStruct.PLL.PLLM = 16;\n  RCC_OscInitStruct.PLL.PLLN = 336;\n  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;\n  RCC_OscInitStruct.PLL.PLLQ = 7;\n  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)\n  {\n    Error_Handler();\n  }\n\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;\n  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;\n  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)\n  {\n    Error_Handler();\n  }\n\n  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);\n\n  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);\n\n  /* SysTick_IRQn interrupt configuration */\n  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);\n}\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n  * @brief  This function is executed in case of error occurrence.\n  * @param  None\n  * @retval None\n  */\nvoid Error_Handler(void)\n{\n  /* USER CODE BEGIN Error_Handler */\n  /* User can add his own implementation to report the HAL error return state */\n  while(1) \n  {\n    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);\n    \n    /* Insert delay 100 ms */\n    HAL_Delay(100);\n  }\n  /* USER CODE END Error_Handler */ \n}\n\nvoid DebugGood_Handler(void)\n{\n\n  DisplayLedDemo();\n\n}\n\n#ifdef USE_FULL_ASSERT\n\n/**\n   * @brief Reports the name of the source file and the source line number\n   * where the assert_param error has occurred.\n   * @param file: pointer to the source file name\n   * @param line: assert_param error line source number\n   * @retval None\n   */\nvoid assert_failed(uint8_t* file, uint32_t line)\n{\n  /* USER CODE BEGIN 6 */\n  /* User can add his own implementation to report the file name and line number,\n    ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\n  /* USER CODE END 6 */\n\n}\n\n#endif\n\n/**\n  * @}\n  */ \n\n/**\n  * @}\n*/ \n\n/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/\n",
			"file": "Src/main.c",
			"file_size": 13195,
			"file_write_time": 131106915424595901,
			"settings":
			{
				"buffer_size": 12685,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/usart.c",
			"settings":
			{
				"buffer_size": 5220,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/steven/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
			"settings":
			{
				"buffer_size": 264,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/steven/STM32CubeMX/ledstrips_nucleo/Src/spi.c",
			"settings":
			{
				"buffer_size": 5764,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Inc/FrameBuffer.h",
			"settings":
			{
				"buffer_size": 1269,
				"line_ending": "Unix",
				"name": "// FrameBuffer.h"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				],
				[
					"Packages/User/make.sublime-build",
					""
				]
			],
			[
				"Packages/User/make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				]
			],
			[
				"Packages/User/make burn.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "orig",
		"selected_items":
		[
			[
				"orig",
				"Origami: Destroy Current Pane"
			],
			[
				"open file",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Colorsublime: Install Theme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				":w",
				":w - Save"
			],
			[
				"pac con inst",
				"Package Control: Install Package"
			],
			[
				"vie me",
				"View: Toggle Menu"
			],
			[
				"view sid",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"vien ",
				"View: Toggle Menu"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/steven/projects/ledstrips_nucleo/Src/usart.c",
		"/home/steven/projects/ledstrips_nucleo/Lib/Middlewares/Third_Party/FreeRTOS/Source/tasks.c",
		"/home/steven/foo",
		"/home/steven/.config/sublime-text-3/Packages/User/make.sublime-build",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s",
		"/home/steven/projects/ledstrips_nucleo/Inc/ControlRegisters.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/CMSIS/Include/arm_math.h",
		"/usr/arm-none-eabi/include/stdio.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_usart.c",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_usart.h",
		"/home/steven/projects/ledstrips_nucleo/Inc/mxconstants.h",
		"/home/steven/projects/ledstrips_nucleo/usart.c",
		"/home/steven/projects/ledstrips_nucleo/usart.h",
		"/home/steven/projects/ledstrips_nucleo/Inc/stm32f4xx_it.h",
		"/home/steven/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/steven/projects/ledstrips_nucleo/ledstrips_nucleo.elf",
		"/home/steven/.config/sublime-text-3/Packages/User/ClangAutoComplete.sublime-settings",
		"/home/steven/projects/ledstrips_nucleo/Src/dma.c",
		"/home/steven/projects/ledstrips_nucleo/Inc/stm32f4xx_hal_conf.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_wwdg.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c",
		"/home/steven/projects/ledstrips_nucleo/Src/tim.c",
		"/home/steven/projects/ledstrips_nucleo/ledstrips_nucleo.sublime-project",
		"/home/steven/.config/sublime-text-3/Packages/User/make burn.sublime-build",
		"/home/steven/projects/stm_discovery_lcd/lcdcontrol.h",
		"/home/steven/projects/stm_discovery_lcd/stm32f4xx_stddrivers.c",
		"/home/steven/projects/stm_discovery_lcd/GameOfLife.c",
		"/home/steven/projects/stm_discovery_lcd/AsciiLib.h",
		"/home/steven/projects/stm_discovery_lcd/interrupts.c",
		"/home/steven/projects/stm_discovery_lcd/init.c",
		"/home/steven/projects/stm_discovery_lcd/lcdtimer.c",
		"/home/steven/projects/stm_discovery_lcd/lcddrawing.c",
		"/home/steven/projects/stm_discovery_lcd/TouchScreen/touch_7846.c",
		"/home/steven/projects/stm_discovery_lcd/lcddrawing.h",
		"/home/steven/projects/stm_discovery_lcd/config.h",
		"/home/steven/projects/cyoa/cyoa/manage.py",
		"/home/steven/projects/bootstrap-3.3.6/index.html",
		"/home/steven/projects/cyoa/cyoa/static/css/default.css",
		"/home/steven/projects/cyoa/cyoa/requirements.txt",
		"/home/steven/projects/cyoa/requirements.txt",
		"/home/steven/Downloads/Timelapser.py",
		"/home/steven/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"<selection>",
			"<open files>",
			"<open folders>",
			"",
			"<current file>, <open files>",
			"<current file>",
			"<current file>,<open files>",
			"<selection>,<current file>",
			"<selection>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"sb",
			"normal",
			"monospace",
			"liberation",
			"out",
			"sp",
			"Frame ",
			"TcCplt",
			"huart->RxState",
			"__HAL_UART_ENABLE_IT",
			"__HAL_UART_ENABLE",
			"__HAL_UART",
			"__HAL",
			"USART_Transmit",
			"red",
			"uint",
			"ColorTypeDef",
			"IRQHandler",
			"TIM1_UP",
			"hdma_tim2_ch1_gpio_low",
			"hdma_tim2_ch2_gpio_data",
			"hdma_tim2_ch1_gpio_high",
			"TIM1",
			"htim2",
			"TIMx_DMA_CC",
			"Hal_tim_pwm_start",
			"Hal_tim_pwm",
			"hdma_tim2_ch1_gpio_low.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;\n    // hdma_tim2_ch1_gpio_low.Init.MemBurst = DMA_MBURST_INC4;\n    ",
			"memory",
			"memburst",
			"DMA_CHECKFIFo",
			"HAL_DMA_INIT",
			"DMA_Ty",
			"DMA_FIFOMODE_ENABLE",
			"FIFO",
			"FIFOP",
			"base_registers",
			"DMA_base",
			"ERror",
			"ERrror",
			"TIM_DMA_UPDATE",
			"TIM_DIER_UDE",
			"DIER",
			"GPIO_SPEED",
			"GPIOA_BASE",
			"GPIO_TypeDef",
			"GPIO",
			"Tim_Typedef",
			"stream5",
			"stream6",
			"Stream4",
			"DBGMCU",
			"NVIC",
			"tim3",
			"low_update",
			"hdma_tim3_ch2",
			"hdma_tim3_ch1",
			"tim3",
			"IRQn_T",
			"while(1)",
			"wwdg",
			"WWDG",
			"Hal_Delay",
			"START_IT",
			"_trig",
			"TIM_ENABLE",
			"__HAL_TIM_SET",
			"TIM_FLAG",
			"TIM_SR",
			"TIM_DMA",
			"DISABLE_DMA",
			"DMA",
			"HAL_TIM_PeriodElapsedCallback",
			"__HAL_TIM_PeriodElapsedCallback",
			"HAL_TIM_PeriodElapsedCallback",
			"HandleTypedef",
			"IRQ",
			"IRQn",
			"ClearIT",
			"_trig",
			"IRQHa",
			"HandleTypeDef",
			"HAL_DMA_Init",
			"TIM_OC_Init",
			";\n",
			"addRandomLife",
			"NUM_LIFE_OBJ",
			"NUM_LIFE_OBJECTS",
			"iterate",
			"GOL_Grid",
			"**",
			"lcdMask",
			"digitMask",
			"conf.h",
			"GPIO_TypeDef",
			"GPIO_Type",
			"initADC",
			"dispCount",
			"RED",
			"TIM_TimeBaseInitTypeDef",
			"//#",
			"Julija.h",
			"as",
			"LCD_Set",
			"rand",
			"Pen_Point",
			"Pen_Poinnt"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"green",
			"Pixel",
			"hdma_timx_gpio_low",
			"hdma_timx_gpio_data",
			"hdma_timx_gpio_high",
			"htimx",
			"high",
			"hdma_tim2_ch2_gpio_data",
			"hdma_tim2_ch1_gpio_low",
			"LifeGrid"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 25,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Inc/ControlRegisters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2164,
						"regions":
						{
						},
						"selection":
						[
							[
								164,
								164
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10904,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1235.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10904,
						"regions":
						{
						},
						"selection":
						[
							[
								1806,
								1806
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1102.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22026,
						"regions":
						{
						},
						"selection":
						[
							[
								3956,
								3956
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/R/R.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/steven/STM32CubeMX/ledstrips_nucleo/Inc/spi.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2716,
						"regions":
						{
						},
						"selection":
						[
							[
								336,
								336
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Src/syscalls.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2881,
						"regions":
						{
						},
						"selection":
						[
							[
								1988,
								1988
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1425.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Inc/usart.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 582,
						"regions":
						{
						},
						"selection":
						[
							[
								344,
								344
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Inc/stm32f4xx_hal_conf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17387,
						"regions":
						{
						},
						"selection":
						[
							[
								3552,
								3552
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 912.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Src/dma.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3066,
						"regions":
						{
						},
						"selection":
						[
							[
								2898,
								2898
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 627.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Src/tim.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11392,
						"regions":
						{
						},
						"selection":
						[
							[
								5986,
								5986
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1660.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Inc/tim.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3185,
						"regions":
						{
						},
						"selection":
						[
							[
								2348,
								2348
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 912.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Src/gpio.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4273,
						"regions":
						{
						},
						"selection":
						[
							[
								2940,
								2940
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 912.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "Inc/gpio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2782,
						"regions":
						{
						},
						"selection":
						[
							[
								2306,
								2306
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 456.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "Src/stm32f4xx_it.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4106,
						"regions":
						{
						},
						"selection":
						[
							[
								4019,
								4019
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1653.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73835,
						"regions":
						{
						},
						"selection":
						[
							[
								36181,
								36181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16188.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "colors.out",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24060,
						"regions":
						{
						},
						"selection":
						[
							[
								21655,
								21655
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 9918.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65373,
						"regions":
						{
						},
						"selection":
						[
							[
								60679,
								60679
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22230.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38364,
						"regions":
						{
						},
						"selection":
						[
							[
								14509,
								14509
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5814.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "colors.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 963,
						"regions":
						{
						},
						"selection":
						[
							[
								774,
								774
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "STM32F401RETx_FLASH.ld",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5677,
						"regions":
						{
						},
						"selection":
						[
							[
								5435,
								5435
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4237.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 174367,
						"regions":
						{
						},
						"selection":
						[
							[
								38047,
								38047
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20216.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13616,
						"regions":
						{
						},
						"selection":
						[
							[
								7470,
								7470
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2242.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 317893,
						"regions":
						{
						},
						"selection":
						[
							[
								7155,
								7155
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1311.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 22,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20121,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										244,
										254
									],
									[
										371,
										381
									],
									[
										493,
										503
									],
									[
										606,
										616
									],
									[
										717,
										727
									],
									[
										845,
										855
									],
									[
										979,
										989
									],
									[
										1091,
										1101
									],
									[
										1205,
										1215
									],
									[
										1319,
										1329
									],
									[
										1433,
										1443
									],
									[
										1554,
										1564
									],
									[
										1660,
										1670
									],
									[
										1767,
										1777
									],
									[
										1874,
										1884
									],
									[
										1981,
										1991
									],
									[
										2088,
										2098
									],
									[
										2195,
										2205
									],
									[
										2293,
										2303
									],
									[
										2836,
										2846
									],
									[
										2956,
										2966
									],
									[
										3053,
										3063
									],
									[
										3155,
										3165
									],
									[
										3242,
										3252
									],
									[
										3353,
										3363
									],
									[
										3460,
										3470
									],
									[
										3567,
										3577
									],
									[
										3677,
										3687
									],
									[
										3791,
										3801
									],
									[
										3905,
										3915
									],
									[
										4019,
										4029
									],
									[
										4132,
										4142
									],
									[
										4239,
										4249
									],
									[
										4348,
										4358
									],
									[
										4455,
										4465
									],
									[
										4662,
										4672
									],
									[
										4776,
										4786
									],
									[
										4892,
										4902
									],
									[
										5375,
										5385
									],
									[
										5588,
										5598
									],
									[
										5695,
										5705
									],
									[
										5802,
										5812
									],
									[
										6326,
										6336
									],
									[
										6433,
										6443
									],
									[
										6540,
										6550
									],
									[
										6647,
										6657
									],
									[
										6754,
										6764
									],
									[
										7261,
										7271
									],
									[
										7374,
										7384
									],
									[
										7481,
										7491
									],
									[
										7588,
										7598
									],
									[
										7689,
										7699
									],
									[
										7798,
										7808
									],
									[
										7912,
										7922
									],
									[
										8437,
										8447
									],
									[
										8721,
										8731
									],
									[
										9015,
										9025
									],
									[
										9071,
										9081
									],
									[
										9155,
										9165
									],
									[
										9197,
										9207
									],
									[
										9279,
										9289
									],
									[
										9334,
										9344
									],
									[
										9411,
										9421
									],
									[
										9470,
										9480
									],
									[
										9544,
										9554
									],
									[
										9591,
										9601
									],
									[
										9669,
										9679
									],
									[
										9711,
										9721
									],
									[
										9791,
										9801
									],
									[
										9838,
										9848
									],
									[
										9918,
										9928
									],
									[
										9965,
										9975
									],
									[
										10048,
										10058
									],
									[
										10095,
										10105
									],
									[
										10175,
										10185
									],
									[
										10222,
										10232
									],
									[
										10308,
										10318
									],
									[
										10355,
										10365
									],
									[
										10442,
										10452
									],
									[
										10502,
										10512
									],
									[
										10580,
										10590
									],
									[
										10640,
										10650
									],
									[
										10727,
										10737
									],
									[
										10787,
										10797
									],
									[
										10874,
										10884
									],
									[
										10934,
										10944
									],
									[
										11021,
										11031
									],
									[
										11080,
										11090
									],
									[
										11167,
										11177
									],
									[
										11227,
										11237
									],
									[
										11314,
										11324
									],
									[
										11374,
										11384
									],
									[
										11452,
										11462
									],
									[
										11494,
										11504
									],
									[
										11570,
										11580
									],
									[
										11613,
										11623
									],
									[
										11695,
										11705
									],
									[
										11753,
										11763
									],
									[
										11835,
										11845
									],
									[
										11893,
										11903
									],
									[
										11974,
										11984
									],
									[
										12031,
										12041
									],
									[
										12101,
										12111
									],
									[
										12144,
										12154
									],
									[
										12223,
										12233
									],
									[
										12272,
										12282
									],
									[
										12351,
										12361
									],
									[
										12400,
										12410
									],
									[
										12479,
										12489
									],
									[
										12528,
										12538
									],
									[
										12610,
										12620
									],
									[
										12653,
										12663
									],
									[
										12738,
										12748
									],
									[
										12781,
										12791
									],
									[
										12866,
										12876
									],
									[
										12909,
										12919
									],
									[
										12991,
										13001
									],
									[
										13034,
										13044
									],
									[
										13122,
										13132
									],
									[
										13171,
										13181
									],
									[
										13256,
										13266
									],
									[
										13305,
										13315
									],
									[
										13386,
										13396
									],
									[
										13431,
										13441
									],
									[
										13515,
										13525
									],
									[
										13560,
										13570
									],
									[
										13660,
										13670
									],
									[
										13717,
										13727
									],
									[
										13798,
										13808
									],
									[
										13855,
										13865
									],
									[
										13935,
										13945
									],
									[
										13988,
										13998
									],
									[
										14069,
										14079
									],
									[
										14129,
										14139
									],
									[
										14211,
										14221
									],
									[
										14260,
										14270
									],
									[
										14342,
										14352
									],
									[
										14391,
										14401
									],
									[
										14473,
										14483
									],
									[
										14522,
										14532
									],
									[
										14612,
										14622
									],
									[
										14672,
										14682
									],
									[
										14756,
										14766
									],
									[
										14816,
										14826
									],
									[
										14903,
										14913
									],
									[
										14963,
										14973
									],
									[
										15044,
										15054
									],
									[
										15104,
										15114
									],
									[
										15185,
										15195
									],
									[
										15245,
										15255
									],
									[
										15320,
										15330
									],
									[
										15365,
										15375
									],
									[
										15455,
										15465
									],
									[
										15515,
										15525
									],
									[
										15602,
										15612
									],
									[
										15662,
										15672
									],
									[
										15749,
										15759
									],
									[
										15809,
										15819
									],
									[
										15890,
										15900
									],
									[
										15935,
										15945
									],
									[
										16023,
										16033
									],
									[
										16066,
										16076
									],
									[
										16154,
										16164
									],
									[
										16197,
										16207
									],
									[
										16281,
										16291
									],
									[
										16335,
										16345
									],
									[
										16398,
										16408
									],
									[
										16453,
										16463
									],
									[
										16913,
										16923
									],
									[
										17464,
										17474
									],
									[
										17775,
										17785
									],
									[
										18132,
										18142
									],
									[
										18162,
										18172
									],
									[
										18253,
										18263
									],
									[
										18640,
										18650
									],
									[
										18827,
										18837
									],
									[
										19052,
										19062
									],
									[
										19285,
										19295
									],
									[
										19463,
										19473
									],
									[
										19514,
										19524
									],
									[
										19675,
										19685
									],
									[
										19726,
										19736
									],
									[
										19886,
										19896
									],
									[
										19937,
										19947
									],
									[
										20013,
										20023
									],
									[
										20056,
										20066
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								3049,
								3049
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3422.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/home/steven/STM32Cube/Repository/STM32Cube_FW_F4_V1.12.0/Projects/STM32F429I-Discovery/Transmission/Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25404,
						"regions":
						{
						},
						"selection":
						[
							[
								8777,
								8777
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3781.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37928,
						"regions":
						{
						},
						"selection":
						[
							[
								34841,
								34841
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13547.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40436,
						"regions":
						{
						},
						"selection":
						[
							[
								17398,
								17398
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8531.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10904,
						"regions":
						{
						},
						"selection":
						[
							[
								8343,
								8343
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5531.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "Src/FrameBuffer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3466,
						"regions":
						{
						},
						"selection":
						[
							[
								694,
								694
							]
						],
						"settings":
						{
							"auto_name": "// FrameBuffer.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2095,
						"regions":
						{
						},
						"selection":
						[
							[
								128,
								128
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12685,
						"regions":
						{
						},
						"selection":
						[
							[
								8282,
								8282
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5707.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "Src/usart.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5220,
						"regions":
						{
						},
						"selection":
						[
							[
								88,
								88
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "/home/steven/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 264,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "/home/steven/STM32CubeMX/ledstrips_nucleo/Src/spi.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5764,
						"regions":
						{
						},
						"selection":
						[
							[
								3711,
								3711
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1539.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10904,
						"regions":
						{
						},
						"selection":
						[
							[
								7187,
								7187
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5035.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "Inc/ControlRegisters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2164,
						"regions":
						{
						},
						"selection":
						[
							[
								1374,
								1374
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 28,
					"file": "Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12685,
						"regions":
						{
						},
						"selection":
						[
							[
								6190,
								6190
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3363.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "Inc/ControlRegisters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2164,
						"regions":
						{
						},
						"selection":
						[
							[
								1249,
								1249
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 572.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10904,
						"regions":
						{
						},
						"selection":
						[
							[
								2000,
								2000
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1549.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "Inc/FrameBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1269,
						"regions":
						{
						},
						"selection":
						[
							[
								426,
								426
							]
						],
						"settings":
						{
							"auto_name": "// FrameBuffer.h",
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				2,
				0,
				3,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.173791605036,
			0.535547984147,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 302.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "ledstrips_nucleo",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"mai",
				"~/projects/ledstrips_nucleo/Src/main.c"
			],
			[
				"main",
				"~/STM32Cube/Repository/STM32Cube_FW_F4_V1.12.0/Projects/STM32F429I-Discovery/Transmission/Src/main.c"
			],
			[
				"con",
				"Inc/ControlRegisters.h"
			],
			[
				"hal_uart",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
			],
			[
				"hal_usart",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_usart.h"
			],
			[
				"uart",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
			],
			[
				"it.h",
				"Inc/stm32f4xx_it.h"
			],
			[
				"stm",
				"Src/stm32f4xx_it.c"
			],
			[
				"hal_ua",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
			],
			[
				"hal_us",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_usart.c"
			],
			[
				"usar",
				"usart.h"
			],
			[
				"color",
				"colors.c"
			],
			[
				"colors",
				"colors.out"
			],
			[
				"dma.c",
				"Src/dma.c"
			],
			[
				"stm32f4xx_hal_tim",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c"
			],
			[
				"stm32f401xe",
				"Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
			],
			[
				"stm32",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
			],
			[
				"stm32f4xx_hal_ww",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_wwdg.h"
			],
			[
				"stm32f401xe.s",
				"Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s"
			],
			[
				"stm32f4xx_hal_gpi",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
			],
			[
				"stm32f4xx_hal.c",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c"
			],
			[
				"stm32f4xx_hal.",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
			],
			[
				"tim.c",
				"Src/tim.c"
			],
			[
				"stm32f4xx_hal_dma",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
			],
			[
				"mainc",
				"main.c"
			],
			[
				"gam",
				"GameOfLife.c"
			],
			[
				"ma",
				"Makefile"
			],
			[
				"touch",
				"TouchScreen/touch_7846.c"
			],
			[
				"init",
				"init.c"
			],
			[
				"main.h",
				"main.h"
			],
			[
				"lcdtimer",
				"lcdtimer.c"
			],
			[
				"lcdtime",
				"lcdtimer.c"
			],
			[
				"inter",
				"interrupts.h"
			],
			[
				"int",
				"interrupts.c"
			],
			[
				"game",
				"GameOfLife.h"
			],
			[
				"in",
				"interrupts.h"
			],
			[
				"lcddra",
				"lcddrawing.h"
			],
			[
				"inte",
				"interrupts.c"
			],
			[
				"jul",
				"julia.h"
			],
			[
				"make",
				"Makefile"
			],
			[
				"juli",
				"julia.h"
			],
			[
				"j",
				"julia.h"
			],
			[
				"main.c",
				"main.c"
			],
			[
				"ssd12",
				"SSD1289.c"
			],
			[
				"lcddr",
				"lcddrawing.c"
			],
			[
				"mak",
				"Makefile"
			],
			[
				"lcdtim",
				"lcdtimer.c"
			],
			[
				"mk",
				"Makefile"
			],
			[
				"tou",
				"TouchScreen/touch_7846.h"
			],
			[
				"m",
				"Makefile"
			],
			[
				"lcdd",
				"lcddrawing.h"
			],
			[
				"lcddraw",
				"lcddrawing.c"
			],
			[
				"lcdcon",
				"lcdcontrol.h"
			],
			[
				"ssd",
				"SSD1289.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 221.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
