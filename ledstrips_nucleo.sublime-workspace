{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"MAT",
				"MATHSRCS"
			],
			[
				"ADC_",
				"ADC_BUFFER_LENGTH"
			],
			[
				"HAL_NVIC_",
				"HAL_NVIC_SetPriority"
			],
			[
				"gNum",
				"gNumLedsPerChannel"
			],
			[
				"demo",
				"demoOneSerialCommandPlugin"
			],
			[
				"ser",
				"currentModeSerialCommandPlugin"
			],
			[
				"dis",
				"displayMode"
			],
			[
				"uin",
				"uint16_t"
			],
			[
				"amp",
				"amplitude"
			],
			[
				"MAX",
				"MAX_NUM_LEDS_PER_CHANNEL"
			],
			[
				"M",
				"MAX_NUM_CHANNELS"
			],
			[
				"MAX_",
				"MAX_NUM_LEDS_PER_CHANNEL"
			],
			[
				"time",
				"timeIncrement"
			],
			[
				"uint",
				"uint16_t"
			],
			[
				"number",
				"numberOfFrames"
			],
			[
				"num",
				"numberOfChannels"
			],
			[
				"is",
				"isDummy"
			],
			[
				"SP",
				"SPI_BUFFSIZE"
			],
			[
				"SPI_CRC",
				"SPI_CRC_VALID"
			],
			[
				"SPI_WRITE",
				"SPI_WRITE_INVALID"
			],
			[
				"invalid",
				"invalidAccess"
			],
			[
				"spi",
				"spiTxBuffer"
			],
			[
				"SPI",
				"SPI_READ"
			],
			[
				"SPI_READ",
				"SPI_READ_VALID"
			],
			[
				"hdma",
				"hdma_spi2_rx"
			],
			[
				"frab",
				"frameBuffer"
			],
			[
				"FB_",
				"FB_FastSetPixel"
			],
			[
				"Frame",
				"FrameBufferZero"
			],
			[
				"glob",
				"globalLedsPerChannel"
			],
			[
				"globa",
				"globalLedsPerChannel"
			],
			[
				"frameBuffer",
				"frameBufferOffset"
			],
			[
				"Fram",
				"FrameBufferZero"
			],
			[
				"DATA",
				"DATA_TIM_PULSE2"
			],
			[
				"h",
				"htimx"
			],
			[
				"WS",
				"WS2812_DEADPERIOD"
			],
			[
				"__HAL_RCC",
				"__HAL_RCC_TIM2_CLK_DISABLE"
			],
			[
				"HAL_NV",
				"HAL_NVIC_EnableIRQ"
			],
			[
				"frameBu",
				"frameBufferOrZeros"
			],
			[
				"sub",
				"subBrightCn"
			],
			[
				"Pi",
				"Pixel"
			],
			[
				"global",
				"globalLedsPerChannel"
			],
			[
				"gl",
				"globalLedsPerChannel"
			],
			[
				"NUMN",
				"MAX_NUM_CHANNELS"
			],
			[
				"NU",
				"NUM_LEDS_PER_CHANNEL"
			],
			[
				"HAL_N",
				"HAL_NVIC_SetPriority"
			],
			[
				"TIM_",
				"TIM_IT_UPDATE"
			],
			[
				"DMA",
				"DMA_IO_FrameBuffer"
			],
			[
				"ht",
				"htimFrame"
			],
			[
				"fra",
				"frameUpdateFn_p"
			],
			[
				"fraeUp",
				"frameUpdaterConfig"
			],
			[
				"DMA_IO",
				"DMA_IO_FrameBuffer"
			],
			[
				"fb",
				"frameBuffer"
			],
			[
				"Demo",
				"DemoOneConfig"
			],
			[
				"frame",
				"frameDelay"
			],
			[
				"fram",
				"frameDelay"
			],
			[
				"x",
				"x08"
			],
			[
				"serialRx",
				"serialRxBuff_p"
			],
			[
				"addr",
				"address"
			],
			[
				"serial",
				"serialDoRawRegisterWrite"
			],
			[
				"fi",
				"filter-out"
			],
			[
				"Raw",
				"RawRegReadValue"
			],
			[
				"clearOnReaD",
				"clearOnReadAccess"
			],
			[
				"Buff",
				"BufferAddress"
			],
			[
				"Bu",
				"BufferStatus"
			],
			[
				"Dis",
				"DisplayStatus"
			],
			[
				"Re",
				"Revision"
			],
			[
				"buffer",
				"bufferError"
			],
			[
				"buff",
				"bufferAddress"
			],
			[
				"en",
				"environStatus"
			],
			[
				"scra",
				"scratchPad"
			],
			[
				"control",
				"controlRegisters"
			],
			[
				"read",
				"readOnlyAccess"
			],
			[
				"valid",
				"validAccess"
			],
			[
				"inv",
				"invalidAccess"
			],
			[
				"vali",
				"validAccess"
			],
			[
				"cont",
				"controlRegisters"
			],
			[
				"regDis",
				"regDisplayStatus"
			],
			[
				"regDispl",
				"regDisplayControl"
			],
			[
				"displ",
				"displayControl"
			],
			[
				"numb",
				"numberLedsPerStrip"
			],
			[
				"pixel",
				"pixelId"
			],
			[
				"bu",
				"bufferAddress"
			],
			[
				"con",
				"controlRegisters"
			],
			[
				"rea",
				"readControlRegister"
			],
			[
				"DIS",
				"DISPLAYERROR_BR"
			],
			[
				"NUM",
				"NUM_CHANNELS"
			],
			[
				"hu",
				"huart2"
			],
			[
				"HAL_U",
				"HAL_UART_RxCpltCallback"
			],
			[
				"uar",
				"uartCharBuffer"
			],
			[
				"HAL",
				"HAL_BUSY"
			],
			[
				"u",
				"uartBuff"
			],
			[
				"UART_H",
				"UART_HandleTypeDef"
			],
			[
				"ua",
				"uartBuff"
			],
			[
				"uart",
				"uartBuffPtr"
			],
			[
				"un",
				"uint8_t"
			],
			[
				"HAL_UAR",
				"HAL_UART_Receive_IT"
			],
			[
				"usa",
				"usartCharBuffer"
			],
			[
				"us",
				"usartCharBuffer"
			],
			[
				"a",
				"amplitude"
			],
			[
				"set",
				"setPixelBrightness"
			],
			[
				"pix",
				"pixelIdx"
			],
			[
				"_pix",
				"_pixelBlockNow"
			],
			[
				"return",
				"returnBlock"
			],
			[
				"COlo",
				"ColorTypeDef"
			],
			[
				"pi",
				"pixelBlock"
			],
			[
				"LED",
				"LED_CHANNEL0"
			],
			[
				"colorPro",
				"colorPrevious0"
			],
			[
				"__HAL_TIM",
				"__HAL_TIM_DISABLE"
			],
			[
				"DAT",
				"DATA_TIM_PERIOD_SC"
			],
			[
				"TIM_CH",
				"TIM_CHANNEL_2"
			],
			[
				"TIM_CC",
				"TIM_CCxChannelCmd"
			],
			[
				"TIM_CHA",
				"TIM_CHANNEL_1"
			],
			[
				"hdm",
				"hdma_tim2_ch1_gpio_low"
			],
			[
				"De",
				"Debug_Setup"
			],
			[
				"GPIO",
				"GPIO_TypeDef"
			],
			[
				"Gp",
				"GpioA"
			],
			[
				"NVI",
				"NVIC_CTRL_INTR_REG"
			],
			[
				"Hal",
				"HAL_Delay"
			],
			[
				"LD2",
				"LD2_Pin"
			],
			[
				"LD2_P",
				"LD2_GPIO_Port"
			],
			[
				"DA",
				"DATA_TIM_PERIOD_SC"
			],
			[
				"hdma_tim2_",
				"hdma_tim2_ch1_gpio_high"
			],
			[
				"hdma_tim2_ch1_",
				"hdma_tim2_ch1_gpio_low"
			],
			[
				"HAL_",
				"HAL_GPIO_WritePin"
			],
			[
				"DM",
				"DMA_IO_FrameBuffer"
			],
			[
				"in",
				"index"
			],
			[
				"Color",
				"ColorTypeDef"
			],
			[
				"hd",
				"hdma_tim3_ch1"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Inc/ControlRegisters.h",
			"settings":
			{
				"buffer_size": 4786,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Src/ControlRegisters.c",
			"settings":
			{
				"buffer_size": 9457,
				"line_ending": "Unix",
				"name": "// ControlRegisters.c"
			}
		},
		{
			"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s",
			"settings":
			{
				"buffer_size": 21561,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Inc/spi.h",
			"settings":
			{
				"buffer_size": 2741,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/stm32f4xx_it.c",
			"settings":
			{
				"buffer_size": 4894,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Inc/main.h",
			"settings":
			{
				"buffer_size": 792,
				"line_ending": "Unix",
				"name": "// main.h"
			}
		},
		{
			"file": "Lib/Drivers/CMSIS/Include/arm_math.h",
			"settings":
			{
				"buffer_size": 245185,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 3097,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Inc/FrameBuffer.h",
			"settings":
			{
				"buffer_size": 1185,
				"line_ending": "Unix",
				"name": "// FrameBuffer.h"
			}
		},
		{
			"file": "Src/adc.c",
			"settings":
			{
				"buffer_size": 5262,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h",
			"settings":
			{
				"buffer_size": 73835,
				"line_ending": "Windows"
			}
		},
		{
			"file": "colors.out",
			"settings":
			{
				"buffer_size": 24060,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c",
			"settings":
			{
				"buffer_size": 65373,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h",
			"settings":
			{
				"buffer_size": 38364,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c",
			"settings":
			{
				"buffer_size": 174367,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h",
			"settings":
			{
				"buffer_size": 13616,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h",
			"settings":
			{
				"buffer_size": 317893,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Projects/STM32469I_EVAL/Templates/Inc/main.h",
			"settings":
			{
				"buffer_size": 2699,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/**\n  ******************************************************************************\n  * @file    Transmission/Src/main.c\n  * @author  MCD Application Team\n  * @version V1.0.0\n  * @date    06-January-2016\n  * @brief   This example provides a description of how to generate a parallel\n  *          data transmission on GPIO with a synchronous clock using a DMA channel\n  *          to transfer a data buffer from SDRAM external memory connected to\n  *          STM32F4xx FSMC interface to GPIO and using a Timer to generate a synchronous\n  *          clock output through the STM32F4xx HAL API\n  ******************************************************************************\n  * @attention\n  *\n  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>\n  *\n  * Redistribution and use in source and binary forms, with or without modification,\n  * are permitted provided that the following conditions are met:\n  *   1. Redistributions of source code must retain the above copyright notice,\n  *      this list of conditions and the following disclaimer.\n  *   2. Redistributions in binary form must reproduce the above copyright notice,\n  *      this list of conditions and the following disclaimer in the documentation\n  *      and/or other materials provided with the distribution.\n  *   3. Neither the name of STMicroelectronics nor the names of its contributors\n  *      may be used to endorse or promote products derived from this software\n  *      without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  *\n  ******************************************************************************\n  */\n\n/* Includes ------------------------------------------------------------------*/\n#include \"main.h\"\n#include <stdio.h>\n#include \"string.h\"\n#include \"stlogo.h\"\n\n/* Private typedef -----------------------------------------------------------*/\n/* Private define ------------------------------------------------------------*/\n/* Private macro -------------------------------------------------------------*/\n/* Private variables ---------------------------------------------------------*/\n__IO int SendData = 0;\n__IO int EndTransmit = 0;\n\n\n/* Timer handler declaration */\nTIM_HandleTypeDef    TimHandlex;\nTIM_HandleTypeDef    TimHandley;\n\n/* Output compare structure */\nTIM_OC_InitTypeDef     sOCConfig;\n/* Master configuration structure */\nTIM_MasterConfigTypeDef   sMasterConfig;\n/* Slave configuration structure */\nTIM_SlaveConfigTypeDef    sSlaveConfig;\n\n/* RNG handler declaration */\nRNG_HandleTypeDef rng_handle;\n\n/* CRC handler declaration */\nCRC_HandleTypeDef   crc_handle;\n/* used for storing CRC Value */\nstatic uint32_t uw_crc_value = 0;\n\n/* used to store the data generated by RNG random generator and used by CRC */\n/* also used to store the data to be sent on GPIO.. */\nstatic uint32_t rng_data;\n\n#ifdef INCR_DATA_FRAME\nstatic uint32_t SDRAM_data;\nstatic uint32_t SDRAM_data1;\nstatic uint32_t SDRAM_data2;\nstatic uint32_t SDRAM_data3;\nstatic uint32_t SDRAM_data4;\n#endif /* INCR_DATA_FRAME */\n\n#ifdef INCR_DATA_FRAME_SSO\nstatic uint32_t SDRAM_data;\nstatic uint32_t SDRAM_data1;\nstatic uint32_t SDRAM_data2;\n#endif /* #ifdef INCR_DATA_FRAME_SSO */\n\nstatic uint32_t uw_index;\n\n__IO uint32_t second_mem_address = 0;\n\nchar String1[50];\nchar String2[50];\n\n/* Private function prototypes -----------------------------------------------*/\nstatic void TIMx_Config(void);\nstatic void TIMy_Config(void);\nstatic void SystemClock_Config(void);\nstatic void Display_DemoDescription(void);\nstatic void Data_GPIO_Config(void);\nstatic void Error_Handler(void);\nstatic void TransferComplete(DMA_HandleTypeDef *DmaHandle);\nstatic void TransferError(DMA_HandleTypeDef *DmaHandle);\n\n/* Private functions ---------------------------------------------------------*/\n\n/**\n  * @brief  Main program\n  * @param  None\n  * @retval None\n  */\nint main(void)\n{\n\n  /* STM32L4xx HAL library initialization:\n       - Configure the Flash prefetch\n       - Systick timer is configured by default as source of time base, but user \n         can eventually implement his proper time base source (a general purpose \n         timer for example or other time source), keeping in mind that Time base \n         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and \n         handled in milliseconds basis.\n       - Set NVIC Group Priority to 4\n       - Low Level Initialization\n     */\n  HAL_Init();\n\n  /* Configure USER Button */\n  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);\n\n  /* Configure the system clock to 180 MHz */\n  SystemClock_Config();\n\n  /* Initialize LED */\n  BSP_LED_Init(LED_GREEN);\n  BSP_LED_Init(LED_RED);\n\n  /* Initialize the LCD */\n  BSP_LCD_Init();\n  /* Initialize the LCD Layers */\n  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);\n  /* show wait message to user */\n  sprintf(String1, \"WAIT... !!!\");\n  sprintf(String2, \"   \");\n  Display_DemoDescription();\n\n  /* Initialize the SDRAM */\n  BSP_SDRAM_Init();\n\n  /*************************************************************************/\n  /***   Create data to be sent from RNG and CRC                           */\n  /*************************************************************************/\n  /*## Configure the RNG peripheral #######################################*/\n  rng_handle.Instance = RNG;\n\n  /* DeInitialize the RNG peripheral */\n  if (HAL_RNG_DeInit(&rng_handle) != HAL_OK)\n  {\n    /* DeInitialization Error */\n    Error_Handler();\n  }\n\n  /* Initialize the RNG peripheral */\n  if (HAL_RNG_Init(&rng_handle) != HAL_OK)\n  {\n    /* Initialization Error */\n    Error_Handler();\n  }\n\n  /* Configure the CRC peripheral  */\n  crc_handle.Instance = CRC;\n\n  if (HAL_CRC_Init(&crc_handle) != HAL_OK)\n  {\n    /* Initialization Error */\n    Error_Handler();\n  }\n\n  /*## Generate (FULL_FRAME_SIZE - 4) 32-bit long random numbers ##################################*/\n  for (uw_index = 0; uw_index < FULL_FRAME_SIZE / 4 - 1 ; uw_index++)\n  {\n    if (HAL_RNG_GenerateRandomNumber(&rng_handle, &rng_data) != HAL_OK)\n    {\n      /* Random number generation error */\n      Error_Handler();\n    }\n\n    /******************************************************************************************/\n    /******************************************************************************************/\n    /** in our example using DISCOVERY only PB[11:8] 4bits are available for data transmission*/\n    /** so we must set all non transmitted bit to 0 before calculating CRC                    */\n    /** so that the reception board will be able to compute CRC again based on available bits */\n    /** Also, the CRC result will be transmitted only on 4bits..                              */\n    /** so the non transmitted bit of CRC result will also be set to 0 and display on the LCD */\n    /**                                                                                       */\n    /** on top of this we have to store each data on 8 bits, to only write 8MSB of GPIO,      */\n    /** since GPIO LSB are used in parallel by SDRAM access                                   */\n    /** and so we store 4 data of 4bits at each 32bits data SDRAM @                           */\n    /**    0x0(d3)0(d2)0(d1)0(d0)  with d3,d2,d1,d0 the 4 data to be transmitted on 4bits     */\n    /** the dma will access the memory on byte alignment and so                               */\n    /**  will read 0x0(d0) and write on PB[15:8] (PB[15:12]=0, and PB[11:8]= (d0)             */\n    /**  then read 0x0(d1) and write on PB[15:8] (PB[15:12]=0, and PB[11:8]= (d1)             */\n    /**  etc...                                                                               */\n    /******************************************************************************************/\n    /******************************************************************************************/\n    rng_data &= 0x0F0F0F0F;\n    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uw_index) = rng_data;\n    uw_crc_value = HAL_CRC_Accumulate(&crc_handle, (uint32_t *) & rng_data, 1);\n  }\n\n  /* for debug.. send pre-defined frame... */\n#ifdef INCR_DATA_FRAME\n  /* case 1:  incrementing on 4 bits from 0 to 15\n     so we can easily see in watch window the value incremented on PB[11:8]) */\n  uint32_t indval = 0;\n  __HAL_CRC_DR_RESET(&crc_handle); /* Reset CRC Calculation Unit */\n  for (uw_index = 0; uw_index < FULL_FRAME_SIZE / 4 - 1 ; uw_index++)\n  {\n    SDRAM_data1 = 4 * indval;\n    SDRAM_data2 = (4 * indval + 1) << 8;\n    SDRAM_data3 = (4 * indval + 2) << 16;\n    SDRAM_data4 = (4 * indval + 3) << 24;\n    SDRAM_data = SDRAM_data4 | SDRAM_data3 | SDRAM_data2 | SDRAM_data1;\n    /* copying 4 x 8bits data into our SDRAM buffer */\n    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uw_index) = SDRAM_data;\n    uw_crc_value = HAL_CRC_Accumulate(&crc_handle, (uint32_t *) & SDRAM_data, 1);\n\n    indval = indval + 1;\n    if (indval == 4)\n    {\n      indval = 0;\n    }\n  }\n#endif /* INCR_DATA_FRAME */\n\n#ifdef INCR_DATA_FRAME_SSO\n  /* case 2: changing all bits every 2 data (n, not(n), n+1, not(n+1),..) */\n  uint32_t indval = 0;\n  __HAL_CRC_DR_RESET(&crc_handle); /* Reset CRC Calculation Unit */\n  for (uw_index = 0; uw_index < FULL_FRAME_SIZE / 2 - 2 ; uw_index++)\n  {\n    if (indval == 16)\n    {\n      indval = 0;\n    }\n\n    SDRAM_data1 = indval;           /* 1st data on 4lsb bits of 8bits LSB */\n    uw_index++;\n    SDRAM_data2 = ~(indval << 8);   /* 2nd data on 4lsb bits of 8bits MSB */\n    SDRAM_data = SDRAM_data2 | SDRAM_data1;\n    /* copying 2 x 8bits data into our SDRAM buffer */\n    *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + uw_index) = SDRAM_data;\n    uw_crc_value = HAL_CRC_Accumulate(&crc_handle, (uint32_t *) & SDRAM_data, 1);\n\n    indval++;\n  }\n#endif /* INCR_DATA_FRAME_SSO */\n\n  /*****************************************************************************/\n  /* Storing CRC result as last data sent                                      */\n  /*****************************************************************************/\n  /* keep only the transmitted bits */\n  uw_crc_value &= 0x0F0F0F0F;        /* keeping only bit (d0) */\n\n  /* store result as last table value */\n  *(__IO uint32_t*) (SDRAM_BANK_ADDR + WRITE_READ_ADDR + 4*uw_index) = uw_crc_value;\n\n\n  /*************************************************************************/\n  /*************************************************************************/\n\n  SendData = 0;\n\n  /* show press button message to user */\n  /* using the LCD seems to erase data in SDRAM...  !!! */\n  sprintf(String1, \"PRESS BUTTON !!!\");\n  sprintf(String2, \"  to send frame  \");\n  Display_DemoDescription();\n\n  /* Configure the Data GPIO in output mode  */\n  /* hence avoiding LCD pin impact on receiving board with noise on clock signal */\n  /* impact is that LCD message is a bit dimmed.. but readable */\n  Data_GPIO_Config();\n\n  /* wait for User button to be pressed */\n  while (SendData < 1)\n  {}\n\n  /* show number of data sent and CRC computed */\n  sprintf(String1, \"Nb Data Sent: %lu\", FULL_FRAME_SIZE);\n  sprintf(String2, \"CRC: %lu\", uw_crc_value);\n  Display_DemoDescription();\n\n\n  /* Configure the TIMx for Clock generation and DMA trigger */\n  TIMx_Config();\n  /* Configure the TIMy for Output Compare (count nb of PWM from TIMx) */\n  TIMy_Config();\n\n  /* Set the DMA memory0 conversion complete callback */\n  TimHandlex.hdma[TIMx_DMA_ID]->XferCpltCallback = TransferComplete;\n  /* Set the DMA error callback */\n  TimHandlex.hdma[TIMx_DMA_ID]->XferErrorCallback = TransferError ;\n\n\n  /* Set the DMA memory1 conversion complete callback */\n  TimHandlex.hdma[TIMx_DMA_ID]->XferM1CpltCallback = TransferComplete;\n\n  /* Update second memory address */\n  second_mem_address = (uint32_t)((SDRAM_BANK_ADDR + WRITE_READ_ADDR) + (DMA_MEM_BUFF_SIZE));\n\n  /* Start DMA multi buffer transfer */\n  HAL_DMAEx_MultiBufferStart_IT(TimHandlex.hdma[TIMx_DMA_ID], (SDRAM_BANK_ADDR + WRITE_READ_ADDR), GPIOx_ODR, second_mem_address, DMA_MEM_BUFF_SIZE);\n\n  __HAL_TIM_ENABLE_DMA(&TimHandlex, TIMx_DMA_CC);\n\n  /* Start TIMy OC mode (count number of PWM from TIMx) */\n  if (HAL_TIM_OC_Start_IT(&TimHandley, TIMy_CHANNEL) != HAL_OK)\n  {\n    /* OC Generation Error */\n    Error_Handler();\n  }\n\n  /* Start TIMx PWM generation*/\n  if (HAL_TIM_PWM_Start(&TimHandlex, TIMx_CHANNEL) != HAL_OK)\n  {\n    /* PWM Generation Error */\n    Error_Handler();\n  }\n\n  /* waiting for end of transmission */\n  while (EndTransmit == 0)\n  {}\n\n\n  /* case of normal transmission */\n  if (EndTransmit == 1)\n  {\n    /* end of transaction */\n    BSP_LED_On(LED_GREEN);\n  }\n\n  /* case of Transmission error */\n  if (EndTransmit == 2)\n  {\n    /* end of transaction */\n    BSP_LED_On(LED_RED);\n  }\n\n  while (1)\n  {}\n\n}\n\n/**\n  * @brief  Configure the Data GPIO in output mode\n  *\n  * @note   None\n  * @param  None\n  * @retval None\n  */\nstatic void Data_GPIO_Config(void)\n{\n  GPIO_InitTypeDef   GPIO_InitStruct;\n\n  /* Enable GPIO Clocks */\n  DATA_GPIO_CLK_ENABLE();\n\n  /* Configure output of GPIO as output  */\n  GPIO_InitStruct.Pin = DATA_GPIO_PIN;\n  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;\n  GPIO_InitStruct.Pull = GPIO_NOPULL;\n  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;\n  HAL_GPIO_Init(DATA_GPIO_PORT, &GPIO_InitStruct);\n\n}\n\n\n/**\n  * @brief  Configure the TIMx\n  *\n  * @note   None\n  * @param  None\n  * @retval None\n  */\nstatic void TIMx_Config(void)\n{\n  /* Configure the TIMx peripheral                                              */\n  /* -----------------------------------------------------------------------\n    In this example TIMx input clock (TIMxCLK)  is set to APB clock (PCLK),\n    since APB prescaler is equal to 1.\n      TIMxCLK = PCLK\n      PCLK = HCLK\n      => TIMxCLK = HCLK = SystemCoreClock\n    we will use pre-scaler = 1 to have counter working at SystemCoreClock = 80Mhz\n\n    Note:\n     SystemCoreClock variable holds HCLK frequency and is defined in system_stm32l4xx.c file.\n     Each time the core clock (HCLK) changes, user had to update SystemCoreClock\n     variable value. Otherwise, any configuration based on this variable will be incorrect.\n     This variable is updated in three ways:\n      1) by calling CMSIS function SystemCoreClockUpdate()\n      2) by calling HAL API function HAL_RCC_GetSysClockFreq()\n      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency\n  ----------------------------------------------------------------------- */\n  /* Initialize TIMx peripheral as follows:\n       +   the Period is the Timeout value after which an event will be generated\n          for example if we want an output at 20Mhz (rising, falling, rising, falling,...)\n                      we set Period = 4 (SystemCoreClock/4 = 80MHz/4 = 20MHz)\n       + Prescaler = 1\n       + ClockDivision = 0\n       + Counter direction = Up\n  */\n  /* Set TIMx instance */\n  TimHandlex.Instance        = TIMx;\n  TimHandlex.Init.Period            = TIM_PERIOD;\n  TimHandlex.Init.Prescaler         = 0;\n  TimHandlex.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;\n  TimHandlex.Init.CounterMode       = TIM_COUNTERMODE_UP;\n  TimHandlex.Init.RepetitionCounter = 0;\n\n  if (HAL_TIM_PWM_Init(&TimHandlex) != HAL_OK)\n  {\n    /* Initialization Error */\n    Error_Handler();\n  }\n\n  /* configuring Timer for PWM mode */\n  sOCConfig.OCMode       = TIM_OCMODE_PWM1;\n  sOCConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;\n  sOCConfig.Pulse       = TIM_PULSE_VALUE;\n  sOCConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW;\n  sOCConfig.OCFastMode   = TIM_OCFAST_DISABLE;\n  sOCConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n  sOCConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;\n\n  if (HAL_TIM_PWM_ConfigChannel(&TimHandlex, &sOCConfig, TIMx_CHANNEL) != HAL_OK)\n  {\n    /* Configuration Error */\n    Error_Handler();\n  }\n\n  /* Configure TIMx as master & use the OCxREF event as Trigger Output (TRGO) */\n  sMasterConfig.MasterOutputTrigger = TIMx_TRGO_OCREF;\n  sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_ENABLE;\n  if ( HAL_TIMEx_MasterConfigSynchronization(&TimHandlex, &sMasterConfig) != HAL_OK)\n  {\n    /* Configuration Error */\n    Error_Handler();\n  }\n\n}\n\n/**\n  * @brief  Configure the TIMy\n  *\n  * @note   None\n  * @param  None\n  * @retval None\n  */\nstatic void TIMy_Config(void)\n{\n  /* Configure the TIMy peripheral                                              */\n  /* -----------------------------------------------------------------------\n    In this example TIMy is set in Slave mode. The ITR input is used as input trigger.\n   It is connected to TIMx TRGO output. \n    Each edge of ITR is incrementing the counter.\n    The channel 1 is configured in Output Compare mode with the compare register \n   preloaded with number of edge to be counted (nb of data to be transfered)\n   The prescaler is used to count the number of data because nb of data can be > 0xFFF\n  ----------------------------------------------------------------------- */\n\n  /* Set TIMy instance */\n  TimHandley.Instance        = TIMy;\n  TimHandley.Init.Period            = 0xFFFFFFFF;  /* TIM2 counter is 32bit */\n  TimHandley.Init.Prescaler         = 0;\n  TimHandley.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;\n  TimHandley.Init.CounterMode       = TIM_COUNTERMODE_UP;\n  TimHandley.Init.RepetitionCounter = 0;\n\n  if (HAL_TIM_OC_Init(&TimHandley) != HAL_OK)\n  {\n    /* Initialization Error */\n    Error_Handler();\n  }\n\n  /* configuring Timer for OC mode */\n  sOCConfig.OCMode       = TIM_OCMODE_TIMING;\n  sOCConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;\n  sOCConfig.Pulse       = TIMy_COMPARE_VALUE;\n  sOCConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW;\n  sOCConfig.OCFastMode   = TIM_OCFAST_DISABLE;\n  sOCConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n  sOCConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;\n\n  if (HAL_TIM_OC_ConfigChannel(&TimHandley, &sOCConfig, TIMy_CHANNEL) != HAL_OK)\n  {\n    /* Configuration Error */\n    Error_Handler();\n  }\n\n  /* Configure TIMy in External Clock mode1 slave mode &\n   use the Internal Trigger connected to TIMx TRGO as trigger source */\n  sSlaveConfig.SlaveMode     = TIM_SLAVEMODE_EXTERNAL1;\n  sSlaveConfig.InputTrigger  = TIMy_TS;\n  if (HAL_TIM_SlaveConfigSynchronization(&TimHandley, &sSlaveConfig) != HAL_OK)\n  {\n    /* Configuration Error */\n    Error_Handler();\n  }\n\n}\n\n/**\n  * @brief  TIM Output Compare callback\n  * @note   This function is executed when the TIM Output Compare interrupt\n  *         is generated\n  * @retval None\n  */\nvoid  HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)\n{\n  if (htim->Instance == TIMy)\n  {\n    EndTransmit = 1;\n  }\n}\n\n/**\n  * @brief  DMA conversion complete callback\n  * @note   This function is executed when the transfer complete interrupt\n  *         is generated at each end of DMA buffer\n  * @retval None\n  */\nstatic void TransferComplete(DMA_HandleTypeDef *DmaHandle)\n{\n  uint32_t tmp_ct = 0;\n  uint32_t tmp_mar = 0;\n	\n  tmp_ct = ((TimHandlex.hdma[TIMx_DMA_ID]->Instance->CR) & DMA_SxCR_CT);\n  /* Update memory 0 address location */\n  if (tmp_ct != 0)\n  {\n    tmp_mar = TimHandlex.hdma[TIMx_DMA_ID]->Instance->M0AR;\n    HAL_DMAEx_ChangeMemory(TimHandlex.hdma[TIMx_DMA_ID], (tmp_mar + (2*DMA_MEM_BUFF_SIZE)), MEMORY0);\n  }\n  /* Update memory 1 address location */\n  else\n  {\n    tmp_mar = TimHandlex.hdma[TIMx_DMA_ID]->Instance->M1AR;\n    HAL_DMAEx_ChangeMemory(TimHandlex.hdma[TIMx_DMA_ID], (tmp_mar + (2*DMA_MEM_BUFF_SIZE)), MEMORY1);\n  }\n\n}\n\n/**\n  * @brief  DMA conversion complete callback\n  * @note   This function is executed when the transfer error interrupt\n  *         is generated during DMA transfer\n  * @retval None\n  */\nstatic void TransferError(DMA_HandleTypeDef *DmaHandle)\n{\n  EndTransmit = 2;\n}\n\n\n/**\n  * @brief  EXTI line detection callbacks.\n  * @param  GPIO_Pin: Specifies the pins connected EXTI line\n  * @retval None\n  */\nvoid HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)\n{\n  if (GPIO_Pin == KEY_BUTTON_PIN)\n  {\n    SendData = 1;\n  }\n}\n\n/**\n  * @brief  System Clock Configuration\n  *         The system Clock is configured as follow :\n  *            System Clock source            = PLL (HSE)\n  *            SYSCLK(Hz)                     = 180000000\n  *            HCLK(Hz)                       = 180000000\n  *            AHB Prescaler                  = 1\n  *            APB1 Prescaler                 = 1\n  *            APB2 Prescaler                 = 2\n  *            HSE Frequency(Hz)              = 8000000\n  *            PLL_M                          = 8\n  *            PLL_N                          = 360\n  *            PLL_P                          = 2\n  *            PLL_Q                          = 7\n  *            VDD(V)                         = 3.3\n  *            Main regulator output voltage  = Scale1 mode\n  *            Flash Latency(WS)              = 2\n  * @param  None\n  * @retval None\n  */\nvoid SystemClock_Config(void)\n{\n  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\n  RCC_OscInitTypeDef RCC_OscInitStruct = {0};\n\n  /* Enable Power Control clock */\n  __HAL_RCC_PWR_CLK_ENABLE();\n\n  /* The voltage scaling allows optimizing the power consumption when the device is\n     clocked below the maximum system frequency, to update the voltage scaling value \n     regarding system frequency refer to product datasheet.  */\n  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);\n\n  /* Enable HSE Oscillator and activate PLL with HSE as source */\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  RCC_OscInitStruct.HSEState = RCC_HSE_ON;\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  RCC_OscInitStruct.PLL.PLLM = 8;   /* 8 for 180MHz, 16 for 80MHz */\n  RCC_OscInitStruct.PLL.PLLN = 360;  /* 360 for 180MHz, 320 for 80MHz */\n  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;\n  RCC_OscInitStruct.PLL.PLLQ = 7;\n  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)\n  {\n    /* Initialization Error */\n    while (1);\n  }\n\n  /* Activate the Over-Drive mode */\n  HAL_PWREx_EnableOverDrive();\n\n  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2\n     clocks dividers */\n  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;\n  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\n  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) /* 5 for 180MHz, 2 for 80MHz */\n  {\n    /* Initialization Error */\n    while (1);\n  }\n}\n\n/**\n  * @brief  Display main demo messages\n  * @param  None\n  * @retval None\n  */\nstatic void Display_DemoDescription(void)\n{\n\n  /* Set LCD Foreground Layer  */\n  BSP_LCD_SelectLayer(1);\n\n  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);\n\n  /* Clear the LCD */\n  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);\n  BSP_LCD_Clear(LCD_COLOR_WHITE);\n\n  /* Set the LCD Text Color */\n  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);\n\n  /* Display LCD messages */\n  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)\"STM32F429I\", CENTER_MODE);\n  BSP_LCD_SetFont(&Font16);\n  BSP_LCD_DisplayStringAt(0, 35, (uint8_t*)\"Transmission on GPIO\", CENTER_MODE);\n\n  /* Draw Bitmap */\n  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);\n\n  BSP_LCD_SetFont(&Font8);\n  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t*)\"Copyright (c) STMicroelectronics 2015\", CENTER_MODE);\n\n  BSP_LCD_SetFont(&Font12);\n  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);\n  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);\n  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);\n  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);\n\n  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t*)String1, CENTER_MODE);\n  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)String2, CENTER_MODE);\n}\n\n\n/**\n  * @brief  This function is executed in case of error occurrence.\n  * @param  None\n  * @retval None\n  */\nstatic void Error_Handler(void)\n{\n  while (1)\n  {\n    /* Toggle LED with a period of 1 s */\n    BSP_LED_Toggle(LED_RED);\n    HAL_Delay(1000);\n  }\n}\n\n#ifdef  USE_FULL_ASSERT\n/**\n  * @brief  Reports the name of the source file and the source line number\n  *         where the assert_param error has occurred.\n  * @param  file: pointer to the source file name\n  * @param  line: assert_param error line source number\n  * @retval None\n  */\nvoid assert_failed(uint8_t *file, uint32_t line)\n{\n  /* User can add his own implementation to report the file name and line number,\n     ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\n\n  /* Infinite loop */\n  while (1)\n  {}\n}\n#endif\n/**\n  * @}\n  */\n\n/**\n  * @}\n  */\n\n/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/\n",
			"file": "/home/steven/STM32Cube/Repository/STM32Cube_FW_F4_V1.12.0/Projects/STM32F429I-Discovery/Transmission/Src/main.c",
			"file_size": 26136,
			"file_write_time": 130965654370000000,
			"settings":
			{
				"buffer_size": 25404,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/main.c",
			"settings":
			{
				"buffer_size": 18893,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h",
			"settings":
			{
				"buffer_size": 37928,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c",
			"settings":
			{
				"buffer_size": 40436,
				"line_ending": "Windows"
			}
		},
		{
			"file": "colors.c",
			"settings":
			{
				"buffer_size": 963,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Src/FrameBuffer.c",
			"settings":
			{
				"buffer_size": 3193,
				"line_ending": "Unix",
				"name": "// FrameBuffer.c"
			}
		},
		{
			"file": "Src/tim.c",
			"settings":
			{
				"buffer_size": 14296,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h",
			"settings":
			{
				"buffer_size": 44522,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c",
			"settings":
			{
				"buffer_size": 61583,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/usart.c",
			"settings":
			{
				"buffer_size": 5221,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/steven/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
			"settings":
			{
				"buffer_size": 265,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Src/spi.c",
			"settings":
			{
				"buffer_size": 8835,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Src/dma.c",
			"settings":
			{
				"buffer_size": 3415,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c",
			"settings":
			{
				"buffer_size": 86114,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h",
			"settings":
			{
				"buffer_size": 23548,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				],
				[
					"Packages/User/make.sublime-build",
					""
				]
			],
			[
				"Packages/User/make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/make burn.sublime-build",
					""
				]
			],
			[
				"Packages/User/make burn.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 332.0,
		"last_filter": "color",
		"selected_items":
		[
			[
				"color",
				"Colorsublime: Install Theme"
			],
			[
				"add bo",
				"SublimeBookmarks: Add Bookmark"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"orig",
				"Origami: Destroy Current Pane"
			],
			[
				"open file",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Colorsublime: Install Theme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				":w",
				":w - Save"
			],
			[
				"pac con inst",
				"Package Control: Install Package"
			],
			[
				"vie me",
				"View: Toggle Menu"
			],
			[
				"view sid",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"vien ",
				"View: Toggle Menu"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 521.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/steven/projects/ledstrips_nucleo",
		"/home/steven/projects/ledstrips_nucleo/Inc",
		"/home/steven/projects/ledstrips_nucleo/Src"
	],
	"file_history":
	[
		"/home/steven/projects/ledstrips_nucleo/STM32F401RETx_FLASH.ld",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/CMSIS/Include/arm_const_structs.h",
		"/home/steven/projects/ledstrips_nucleo/Inc/FrameBuffer.h",
		"/home/steven/projects/ledstrips_nucleo/Src/dma.c",
		"/home/steven/projects/ledstrips_nucleo/Inc/gpio.h",
		"/home/steven/projects/ledstrips_nucleo/Src/gpio.c",
		"/home/steven/projects/ledstrips_nucleo/Src/syscalls.c",
		"/home/steven/projects/ledstrips_nucleo/Inc/tim.h",
		"/home/steven/projects/ledstrips_nucleo/Inc/usart.h",
		"/home/steven/projects/ledstrips_nucleo/Inc/stm32f4xx_hal_conf.h",
		"/home/steven/STM32Cube/Repository/STM32Cube_FW_F4_V1.12.0/Projects/STM32F401-Discovery/Examples/SPI/SPI_FullDuplex_ComDMA/Src/main.c",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c",
		"/home/steven/STM32Cube/Repository/STM32Cube_FW_F4_V1.12.0/Projects/STM32F401-Discovery/Examples/SPI/SPI_FullDuplex_ComDMA/Src/stm32f4xx_it.c",
		"/home/steven/projects/ledstrips_nucleo/Src/usart.c",
		"/home/steven/projects/ledstrips_nucleo/Lib/Middlewares/Third_Party/FreeRTOS/Source/tasks.c",
		"/home/steven/foo",
		"/home/steven/.config/sublime-text-3/Packages/User/make.sublime-build",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s",
		"/home/steven/projects/ledstrips_nucleo/Inc/ControlRegisters.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/CMSIS/Include/arm_math.h",
		"/usr/arm-none-eabi/include/stdio.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_usart.c",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_usart.h",
		"/home/steven/projects/ledstrips_nucleo/Inc/mxconstants.h",
		"/home/steven/projects/ledstrips_nucleo/usart.c",
		"/home/steven/projects/ledstrips_nucleo/usart.h",
		"/home/steven/projects/ledstrips_nucleo/Inc/stm32f4xx_it.h",
		"/home/steven/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/steven/projects/ledstrips_nucleo/ledstrips_nucleo.elf",
		"/home/steven/.config/sublime-text-3/Packages/User/ClangAutoComplete.sublime-settings",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_wwdg.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h",
		"/home/steven/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c",
		"/home/steven/projects/ledstrips_nucleo/Src/tim.c",
		"/home/steven/projects/ledstrips_nucleo/ledstrips_nucleo.sublime-project",
		"/home/steven/.config/sublime-text-3/Packages/User/make burn.sublime-build",
		"/home/steven/projects/stm_discovery_lcd/lcdcontrol.h",
		"/home/steven/projects/stm_discovery_lcd/stm32f4xx_stddrivers.c",
		"/home/steven/projects/stm_discovery_lcd/GameOfLife.c",
		"/home/steven/projects/stm_discovery_lcd/AsciiLib.h",
		"/home/steven/projects/stm_discovery_lcd/interrupts.c",
		"/home/steven/projects/stm_discovery_lcd/init.c",
		"/home/steven/projects/stm_discovery_lcd/lcdtimer.c",
		"/home/steven/projects/stm_discovery_lcd/lcddrawing.c",
		"/home/steven/projects/stm_discovery_lcd/TouchScreen/touch_7846.c",
		"/home/steven/projects/stm_discovery_lcd/lcddrawing.h",
		"/home/steven/projects/stm_discovery_lcd/config.h",
		"/home/steven/projects/cyoa/cyoa/manage.py",
		"/home/steven/projects/bootstrap-3.3.6/index.html",
		"/home/steven/projects/cyoa/cyoa/static/css/default.css",
		"/home/steven/projects/cyoa/cyoa/requirements.txt",
		"/home/steven/projects/cyoa/requirements.txt",
		"/home/steven/Downloads/Timelapser.py",
		"/home/steven/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"",
			"<selection>",
			"<open files>",
			"<open folders>",
			"",
			"<current file>, <open files>",
			"<current file>",
			"<current file>,<open files>",
			"<selection>,<current file>",
			"<selection>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CBlack",
			"__HAL_TIM_ENABLE",
			"IRQHA",
			"registerCallback",
			"Fram",
			"FrameXfer",
			"NUM_LEDS_PER_CHANNEL",
			"NUM_CHANNELS",
			"callback",
			"DMABURST",
			"dmabur",
			"DebugGood",
			"DisplayLed",
			"enableFrame",
			"sb",
			"normal",
			"monospace",
			"liberation",
			"out",
			"sp",
			"Frame ",
			"TcCplt",
			"huart->RxState",
			"__HAL_UART_ENABLE_IT",
			"__HAL_UART_ENABLE",
			"__HAL_UART",
			"__HAL",
			"USART_Transmit",
			"red",
			"uint",
			"ColorTypeDef",
			"IRQHandler",
			"TIM1_UP",
			"hdma_tim2_ch1_gpio_low",
			"hdma_tim2_ch2_gpio_data",
			"hdma_tim2_ch1_gpio_high",
			"TIM1",
			"htim2",
			"TIMx_DMA_CC",
			"Hal_tim_pwm_start",
			"Hal_tim_pwm",
			"hdma_tim2_ch1_gpio_low.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;\n    // hdma_tim2_ch1_gpio_low.Init.MemBurst = DMA_MBURST_INC4;\n    ",
			"memory",
			"memburst",
			"DMA_CHECKFIFo",
			"HAL_DMA_INIT",
			"DMA_Ty",
			"DMA_FIFOMODE_ENABLE",
			"FIFO",
			"FIFOP",
			"base_registers",
			"DMA_base",
			"ERror",
			"ERrror",
			"TIM_DMA_UPDATE",
			"TIM_DIER_UDE",
			"DIER",
			"GPIO_SPEED",
			"GPIOA_BASE",
			"GPIO_TypeDef",
			"GPIO",
			"Tim_Typedef",
			"stream5",
			"stream6",
			"Stream4",
			"DBGMCU",
			"NVIC",
			"tim3",
			"low_update",
			"hdma_tim3_ch2",
			"hdma_tim3_ch1",
			"tim3",
			"IRQn_T",
			"while(1)",
			"wwdg",
			"WWDG",
			"Hal_Delay",
			"START_IT",
			"_trig",
			"TIM_ENABLE",
			"__HAL_TIM_SET",
			"TIM_FLAG",
			"TIM_SR",
			"TIM_DMA",
			"DISABLE_DMA",
			"DMA",
			"HAL_TIM_PeriodElapsedCallback",
			"__HAL_TIM_PeriodElapsedCallback",
			"HAL_TIM_PeriodElapsedCallback",
			"HandleTypedef",
			"IRQ",
			"IRQn",
			"ClearIT",
			"_trig",
			"IRQHa",
			"HandleTypeDef",
			"HAL_DMA_Init",
			"TIM_OC_Init",
			";\n",
			"addRandomLife",
			"NUM_LIFE_OBJ",
			"NUM_LIFE_OBJECTS",
			"iterate",
			"GOL_Grid",
			"**",
			"lcdMask",
			"digitMask",
			"conf.h",
			"GPIO_TypeDef",
			"GPIO_Type",
			"initADC",
			"dispCount",
			"RED",
			"TIM_TimeBaseInitTypeDef",
			"//#",
			"Julija.h",
			"as",
			"LCD_Set",
			"rand",
			"Pen_Point",
			"Pen_Poinnt"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"green",
			"Pixel",
			"hdma_timx_gpio_low",
			"hdma_timx_gpio_data",
			"hdma_timx_gpio_high",
			"htimx",
			"high",
			"hdma_tim2_ch2_gpio_data",
			"hdma_tim2_ch1_gpio_low",
			"LifeGrid"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 20,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Inc/ControlRegisters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4786,
						"regions":
						{
						},
						"selection":
						[
							[
								98,
								98
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9457,
						"regions":
						{
						},
						"selection":
						[
							[
								6156,
								6156
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4248.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9457,
						"regions":
						{
						},
						"selection":
						[
							[
								53,
								53
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21561,
						"regions":
						{
						},
						"selection":
						[
							[
								3956,
								3956
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/R/R.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3600.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Inc/spi.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2741,
						"regions":
						{
						},
						"selection":
						[
							[
								2339,
								2339
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 702.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Src/stm32f4xx_it.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4894,
						"regions":
						{
						},
						"selection":
						[
							[
								4262,
								4262
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2718.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Inc/main.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 792,
						"regions":
						{
						},
						"selection":
						[
							[
								591,
								591
							]
						],
						"settings":
						{
							"auto_name": "// main.h",
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Lib/Drivers/CMSIS/Include/arm_math.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 245185,
						"regions":
						{
						},
						"selection":
						[
							[
								4095,
								4095
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7668.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3097,
						"regions":
						{
						},
						"selection":
						[
							[
								1021,
								1021
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Inc/FrameBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1185,
						"regions":
						{
						},
						"selection":
						[
							[
								1172,
								1172
							]
						],
						"settings":
						{
							"auto_name": "// FrameBuffer.h",
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 559.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Src/adc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5262,
						"regions":
						{
						},
						"selection":
						[
							[
								2231,
								2231
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73835,
						"regions":
						{
						},
						"selection":
						[
							[
								36418,
								36418
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1466.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "colors.out",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24060,
						"regions":
						{
						},
						"selection":
						[
							[
								21655,
								21655
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 9396.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65373,
						"regions":
						{
						},
						"selection":
						[
							[
								60679,
								60679
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21060.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38364,
						"regions":
						{
						},
						"selection":
						[
							[
								14427,
								14427
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5508.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 174367,
						"regions":
						{
						},
						"selection":
						[
							[
								37389,
								37389
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1037.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13616,
						"regions":
						{
						},
						"selection":
						[
							[
								7470,
								7470
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 144.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 317893,
						"regions":
						{
						},
						"selection":
						[
							[
								3152,
								3152
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1080.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "Lib/Projects/STM32469I_EVAL/Templates/Inc/main.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2699,
						"regions":
						{
						},
						"selection":
						[
							[
								1099,
								1099
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/steven/STM32Cube/Repository/STM32Cube_FW_F4_V1.12.0/Projects/STM32F429I-Discovery/Transmission/Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25404,
						"regions":
						{
						},
						"selection":
						[
							[
								6194,
								6194
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2665.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18893,
						"regions":
						{
						},
						"selection":
						[
							[
								14731,
								14734
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 10486.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37928,
						"regions":
						{
						},
						"selection":
						[
							[
								30468,
								30468
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 338886.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40436,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								25174,
								25174
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17689.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "Inc/ControlRegisters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4786,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				}
			]
		},
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9457,
						"regions":
						{
						},
						"selection":
						[
							[
								158,
								158
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "colors.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 963,
						"regions":
						{
						},
						"selection":
						[
							[
								369,
								369
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "Src/FrameBuffer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3193,
						"regions":
						{
						},
						"selection":
						[
							[
								2299,
								2299
							]
						],
						"settings":
						{
							"auto_name": "// FrameBuffer.c",
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1387.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "Src/tim.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14296,
						"regions":
						{
						},
						"selection":
						[
							[
								3201,
								3201
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5365.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 174367,
						"regions":
						{
						},
						"selection":
						[
							[
								92207,
								92207
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 60436.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3097,
						"regions":
						{
						},
						"selection":
						[
							[
								547,
								547
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18893,
						"regions":
						{
						},
						"selection":
						[
							[
								3782,
								3782
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 1296.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44522,
						"regions":
						{
						},
						"selection":
						[
							[
								30590,
								30590
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9540.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 61583,
						"regions":
						{
						},
						"selection":
						[
							[
								39225,
								39225
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19307.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "Src/usart.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5221,
						"regions":
						{
						},
						"selection":
						[
							[
								2844,
								2844
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2000.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/home/steven/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 265,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "Src/spi.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8835,
						"regions":
						{
						},
						"selection":
						[
							[
								5103,
								5103
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1406.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "Src/dma.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3415,
						"regions":
						{
						},
						"selection":
						[
							[
								2655,
								2655
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86114,
						"regions":
						{
						},
						"selection":
						[
							[
								58387,
								58387
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 35930.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23548,
						"regions":
						{
						},
						"selection":
						[
							[
								18796,
								18796
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7814.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40436,
						"regions":
						{
						},
						"selection":
						[
							[
								19347,
								19347
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9039.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37928,
						"regions":
						{
						},
						"selection":
						[
							[
								32855,
								32855
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2322.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9457,
						"regions":
						{
						},
						"selection":
						[
							[
								3903,
								3903
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2142.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "Inc/ControlRegisters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4786,
						"regions":
						{
						},
						"selection":
						[
							[
								1939,
								1939
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 19,
					"file": "Src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18893,
						"regions":
						{
						},
						"selection":
						[
							[
								6329,
								6329
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 3710.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86114,
						"regions":
						{
						},
						"selection":
						[
							[
								58345,
								58345
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31124.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Lib/Drivers/CMSIS/Include/arm_math.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 245185,
						"regions":
						{
						},
						"selection":
						[
							[
								88689,
								88689
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 49345.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Src/ControlRegisters.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9457,
						"regions":
						{
						},
						"selection":
						[
							[
								129,
								129
							]
						],
						"settings":
						{
							"auto_name": "// ControlRegisters.c",
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "Inc/ControlRegisters.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4786,
						"regions":
						{
						},
						"selection":
						[
							[
								1971,
								1971
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 821.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Inc/FrameBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1185,
						"regions":
						{
						},
						"selection":
						[
							[
								226,
								226
							]
						],
						"settings":
						{
							"auto_name": "// FrameBuffer.h",
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "Src/FrameBuffer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3193,
						"regions":
						{
						},
						"selection":
						[
							[
								45,
								45
							]
						],
						"settings":
						{
							"auto_name": "// FrameBuffer.c",
							"history_list_is_closing": true,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				2,
				0,
				3,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.55744470814,
			0.621710188443,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 197.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "ledstrips_nucleo.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main.c",
				"Src/main.c"
			],
			[
				"main",
				"Lib/Projects/STM32469I_EVAL/Templates/Inc/main.h"
			],
			[
				"",
				"Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
			],
			[
				"mak",
				"Makefile"
			],
			[
				"make",
				"Makefile"
			],
			[
				".ld",
				"STM32F401RETx_FLASH.ld"
			],
			[
				"frame",
				"Inc/FrameBuffer.h"
			],
			[
				"arm_math",
				"Lib/Drivers/CMSIS/Include/arm_math.h"
			],
			[
				"arm_const",
				"Lib/Drivers/CMSIS/Include/arm_const_structs.h"
			],
			[
				"fram",
				"Inc/FrameBuffer.h"
			],
			[
				"_hal_dma",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c"
			],
			[
				"adc.",
				"Src/adc.c"
			],
			[
				"gpio.c",
				"Src/gpio.c"
			],
			[
				"gpio",
				"Inc/gpio.h"
			],
			[
				"_hal_adc",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
			],
			[
				"stm",
				"Inc/stm32f4xx_hal_conf.h"
			],
			[
				"con",
				"Inc/ControlRegisters.h"
			],
			[
				"contr",
				"Inc/ControlRegisters.h"
			],
			[
				"main.h",
				"Inc/main.h"
			],
			[
				"control",
				"Inc/ControlRegisters.h"
			],
			[
				"_spi.h",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
			],
			[
				"dmac",
				"Src/dma.c"
			],
			[
				"spi",
				"Inc/spi.h"
			],
			[
				"spi.c",
				"~/STM32CubeMX/ledstrips_nucleo/Src/spi.c"
			],
			[
				"tim",
				"~/projects/ledstrips_nucleo/Inc/tim.h"
			],
			[
				"hal_tim",
				"~/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
			],
			[
				"_hal",
				"~/projects/ledstrips_nucleo/Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
			],
			[
				"_it",
				"~/projects/ledstrips_nucleo/Src/stm32f4xx_it.c"
			],
			[
				"tim.c",
				"~/projects/ledstrips_nucleo/Src/tim.c"
			],
			[
				"mai",
				"~/projects/ledstrips_nucleo/Src/main.c"
			],
			[
				"hal_uart",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
			],
			[
				"hal_usart",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_usart.h"
			],
			[
				"uart",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
			],
			[
				"it.h",
				"Inc/stm32f4xx_it.h"
			],
			[
				"hal_ua",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
			],
			[
				"hal_us",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_usart.c"
			],
			[
				"usar",
				"usart.h"
			],
			[
				"color",
				"colors.c"
			],
			[
				"colors",
				"colors.out"
			],
			[
				"dma.c",
				"Src/dma.c"
			],
			[
				"stm32f4xx_hal_tim",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c"
			],
			[
				"stm32f401xe",
				"Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
			],
			[
				"stm32",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
			],
			[
				"stm32f4xx_hal_ww",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_wwdg.h"
			],
			[
				"stm32f401xe.s",
				"Lib/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s"
			],
			[
				"stm32f4xx_hal_gpi",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
			],
			[
				"stm32f4xx_hal.c",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c"
			],
			[
				"stm32f4xx_hal.",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
			],
			[
				"stm32f4xx_hal_dma",
				"Lib/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
			],
			[
				"mainc",
				"main.c"
			],
			[
				"gam",
				"GameOfLife.c"
			],
			[
				"ma",
				"Makefile"
			],
			[
				"touch",
				"TouchScreen/touch_7846.c"
			],
			[
				"init",
				"init.c"
			],
			[
				"lcdtimer",
				"lcdtimer.c"
			],
			[
				"lcdtime",
				"lcdtimer.c"
			],
			[
				"inter",
				"interrupts.h"
			],
			[
				"int",
				"interrupts.c"
			],
			[
				"game",
				"GameOfLife.h"
			],
			[
				"in",
				"interrupts.h"
			],
			[
				"lcddra",
				"lcddrawing.h"
			],
			[
				"inte",
				"interrupts.c"
			],
			[
				"jul",
				"julia.h"
			],
			[
				"juli",
				"julia.h"
			],
			[
				"j",
				"julia.h"
			],
			[
				"ssd12",
				"SSD1289.c"
			],
			[
				"lcddr",
				"lcddrawing.c"
			],
			[
				"lcdtim",
				"lcdtimer.c"
			],
			[
				"mk",
				"Makefile"
			],
			[
				"tou",
				"TouchScreen/touch_7846.h"
			],
			[
				"m",
				"Makefile"
			],
			[
				"lcdd",
				"lcddrawing.h"
			],
			[
				"lcddraw",
				"lcddrawing.c"
			],
			[
				"lcdcon",
				"lcdcontrol.h"
			],
			[
				"ssd",
				"SSD1289.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 86.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
